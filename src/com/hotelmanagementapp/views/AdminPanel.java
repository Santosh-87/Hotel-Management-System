package com.hotelmanagementapp.views;

import com.hotelmanagementapp.controller.algorithms.BinarySearch;
import com.hotelmanagementapp.controller.algorithms.InsertionSort;
import com.hotelmanagementapp.controller.algorithms.MergeSort;
import com.hotelmanagementapp.controller.algorithms.SelectionSort;
import com.hotelmanagementapp.model.CustomerModel;
import com.hotelmanagementapp.model.RoomModel;
import com.hotelmanagementapp.util.ValidationUtil;
import com.hotelmanagementapp.views.LoginPage;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Santosh Lama
 * LMU ID: 23048594
 */
/**
 * Represents the admin panel in the hotel management system. 
 * This class serves as the central hub for all administrative operations like  
 * managing rooms, managing check-in/out and view dashboard along with log out and exit button
 */
public class AdminPanel extends javax.swing.JFrame {

    List<RoomModel> roomList;
    List<CustomerModel> checkInList;
    private boolean isAscending;
    private final MergeSort mergeSort;
    private final SelectionSort selectionSort;
    private final InsertionSort insertionSort;
    private final BinarySearch binarySearch;
    private List<RoomModel> sortedRoomList;
    private List<CustomerModel> sortedCheckInList;

    /**
     * Creates new form AdminFrame
     */
    public AdminPanel() {
        initComponents();
        roomList = new ArrayList<>();
        checkInList = new LinkedList<>();
        isAscending = true;
        mergeSort = new MergeSort();
        selectionSort = new SelectionSort();
        insertionSort = new InsertionSort();
        binarySearch = new BinarySearch();
        sortedRoomList = mergeSort.sortByRoomNumber(roomList, isAscending);
        sortedCheckInList = new ArrayList<>();
        addInitialRoomInformation();
        loadRoomListToTable(roomList);
        loadRoomListToTable(sortedRoomList);
        addInitialCheckInInformation();
        loadCustomerListToTable(checkInList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupBedType = new javax.swing.ButtonGroup();
        btnGroupGender = new javax.swing.ButtonGroup();
        btnGroupCheckInPreference = new javax.swing.ButtonGroup();
        pnlMainForAdmin = new javax.swing.JPanel();
        pnlNavBar = new javax.swing.JPanel();
        lblManageRoomButton = new javax.swing.JLabel();
        lblCheckInButton = new javax.swing.JLabel();
        lblCheckOutButton = new javax.swing.JLabel();
        lblBillButton = new javax.swing.JLabel();
        lblDashBoardButton = new javax.swing.JLabel();
        lblLogOutButton = new javax.swing.JLabel();
        lblExitButton = new javax.swing.JLabel();
        tbPaneMain = new javax.swing.JTabbedPane();
        pnlForManageRooms = new javax.swing.JPanel();
        lblManageRoomsBackground = new javax.swing.JLabel();
        pnlMainBodyForManageRooms = new javax.swing.JPanel();
        pnlFormForManageRooms = new javax.swing.JPanel();
        lblRoomNumber = new javax.swing.JLabel();
        txtFieldRoomNumber = new javax.swing.JTextField();
        lblRoomType = new javax.swing.JLabel();
        cmbRoomType = new javax.swing.JComboBox<>();
        lblBedType = new javax.swing.JLabel();
        rbSingleBed = new javax.swing.JRadioButton();
        rbDoubleBed = new javax.swing.JRadioButton();
        lblPrice = new javax.swing.JLabel();
        txtFieldPrice = new javax.swing.JTextField();
        lblRoomGrade = new javax.swing.JLabel();
        cmbRoomGrade = new javax.swing.JComboBox<>();
        lblStatus = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        btnUpdateRoomDetails = new javax.swing.JButton();
        btnClearRoomFields = new javax.swing.JButton();
        btnViewTable = new javax.swing.JButton();
        btnAddRoomDetails1 = new javax.swing.JButton();
        btnDeleteRoomDetails = new javax.swing.JButton();
        btnBackToHomePage = new javax.swing.JButton();
        pnlViewTableForRooms = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRoom = new javax.swing.JTable();
        btnSwitchPanel = new javax.swing.JButton();
        cmbSortInRoom = new javax.swing.JComboBox<>();
        lblSortBy = new javax.swing.JLabel();
        btnAscendingOrDescendingInRoom = new javax.swing.JButton();
        pnlForCustomerCheckIn = new javax.swing.JPanel();
        lblManageCheckInBackGround = new javax.swing.JLabel();
        pnlBodyMainForCheckIn = new javax.swing.JPanel();
        pnlFormForCheckIn = new javax.swing.JPanel();
        cmbMealPlanForCheckIn = new javax.swing.JComboBox<>();
        lblMealPlanForCheckIn = new javax.swing.JLabel();
        lblCheckInPreference = new javax.swing.JLabel();
        rbMaleInCheckIn = new javax.swing.JRadioButton();
        rbFemaleInCheckIn = new javax.swing.JRadioButton();
        txtFieldNationalityInCheckIn = new javax.swing.JTextField();
        lblNationality = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        rbEvening = new javax.swing.JRadioButton();
        rbMorning = new javax.swing.JRadioButton();
        lblRoomNumber2 = new javax.swing.JLabel();
        txtFieldRoomNumberCheckIn = new javax.swing.JTextField();
        lblCheckInDate = new javax.swing.JLabel();
        btnCheckInNow = new javax.swing.JButton();
        btnViewTableCheckIn = new javax.swing.JButton();
        btnClearCheckInFields = new javax.swing.JButton();
        txtFieldMobileNumber = new javax.swing.JTextField();
        lblMobileNumber = new javax.swing.JLabel();
        txtFieldCustomerName = new javax.swing.JTextField();
        lblCustomerName = new javax.swing.JLabel();
        btnBackToHomeFromCheckIn = new javax.swing.JButton();
        btnDeleteCheckInDetails = new javax.swing.JButton();
        btnUpdateCheckInDetails = new javax.swing.JButton();
        jdcForCheckInDate = new com.toedter.calendar.JDateChooser();
        rbAfternoon = new javax.swing.JRadioButton();
        pnlViewTableForCheckIn = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCustomerCheckIn = new javax.swing.JTable();
        btnAddRoomDetails2 = new javax.swing.JButton();
        btnSwitchPanel1 = new javax.swing.JButton();
        cmbSortInCustomer = new javax.swing.JComboBox<>();
        lblSortBy1 = new javax.swing.JLabel();
        btnAscendingOrDescendingInCustomer = new javax.swing.JButton();
        txtFieldForCustomerSearch = new javax.swing.JTextField();
        btnSearchCustomer = new javax.swing.JButton();
        btnViewAllDataForCheckIn = new javax.swing.JButton();
        pnlForCustomerCheckOut = new javax.swing.JPanel();
        lblManageCheckOutBackground = new javax.swing.JLabel();
        pnlMainBodyForCustomerCheckOut = new javax.swing.JPanel();
        pnlFormForCheckOutForm = new javax.swing.JPanel();
        lblRoomNumber1 = new javax.swing.JLabel();
        txtFieldRoomNumber1 = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnCheckOutNow = new javax.swing.JButton();
        btnClear1 = new javax.swing.JButton();
        btnViewTableForCheckOutDetails = new javax.swing.JButton();
        txtFieldCustomerName1 = new javax.swing.JTextField();
        txtFieldMobileNumber1 = new javax.swing.JTextField();
        txtFieldTotalAmount = new javax.swing.JTextField();
        txtFieldPricePerDay = new javax.swing.JTextField();
        lblCustomerName1 = new javax.swing.JLabel();
        lblMobileNumber1 = new javax.swing.JLabel();
        lblCheckInDate1 = new javax.swing.JLabel();
        lblCheckOutDate = new javax.swing.JLabel();
        lblPricePerDay = new javax.swing.JLabel();
        lblTotalAmount = new javax.swing.JLabel();
        btnBackToHomePage1 = new javax.swing.JButton();
        jdcForCheckInDate1 = new com.toedter.calendar.JDateChooser();
        jdcForCheckOutDate = new com.toedter.calendar.JDateChooser();
        pnlTableForCheckOut = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        switchPanelFromCheckOutTable = new javax.swing.JButton();
        pnlForDashBoard = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblTitleAdminDashBoard = new javax.swing.JLabel();
        pnlForTotalRooms = new javax.swing.JPanel();
        lblTotalRoomsTitleAndIcon = new javax.swing.JLabel();
        lblForTotalRoomsData = new javax.swing.JLabel();
        pnlForTotalCheckIns = new javax.swing.JPanel();
        lblTotalCheckInTitleAndIcon = new javax.swing.JLabel();
        lblTotalCheckInData = new javax.swing.JLabel();
        pnlForTotalRevenue = new javax.swing.JPanel();
        lblTotalRevenueTitleAndIcon = new javax.swing.JLabel();
        lblTotalRevenueData = new javax.swing.JLabel();
        pnlForTotalCustomers = new javax.swing.JPanel();
        lblTotalCustomerTitleAndIcon = new javax.swing.JLabel();
        lblTotalCustomersData = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(300, 5));
        setUndecorated(true);

        pnlMainForAdmin.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlNavBar.setBackground(new java.awt.Color(106, 154, 176));

        lblManageRoomButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblManageRoomButton.setForeground(new java.awt.Color(255, 255, 255));
        lblManageRoomButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/manageRoomIcon.png"))); // NOI18N
        lblManageRoomButton.setText("Manage Rooms");
        lblManageRoomButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblManageRoomButtonMouseClicked(evt);
            }
        });

        lblCheckInButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCheckInButton.setForeground(new java.awt.Color(255, 255, 255));
        lblCheckInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/checkInIcon.png"))); // NOI18N
        lblCheckInButton.setText("Check-In");
        lblCheckInButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCheckInButtonMouseClicked(evt);
            }
        });

        lblCheckOutButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCheckOutButton.setForeground(new java.awt.Color(255, 255, 255));
        lblCheckOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/checkOutIcon.png"))); // NOI18N
        lblCheckOutButton.setText("Check-Out");
        lblCheckOutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCheckOutButtonMouseClicked(evt);
            }
        });

        lblBillButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblBillButton.setForeground(new java.awt.Color(255, 255, 255));
        lblBillButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/billIcon.png"))); // NOI18N
        lblBillButton.setText("Bill");

        lblDashBoardButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDashBoardButton.setForeground(new java.awt.Color(255, 255, 255));
        lblDashBoardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/dashBoardIcon.png"))); // NOI18N
        lblDashBoardButton.setText("Dashboard");
        lblDashBoardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDashBoardButtonMouseClicked(evt);
            }
        });

        lblLogOutButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLogOutButton.setForeground(new java.awt.Color(255, 255, 255));
        lblLogOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/logoutIcon.png"))); // NOI18N
        lblLogOutButton.setText("Log Out");
        lblLogOutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogOutButtonMouseClicked(evt);
            }
        });

        lblExitButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblExitButton.setForeground(new java.awt.Color(255, 255, 255));
        lblExitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/close (1).png"))); // NOI18N
        lblExitButton.setText("Exit");
        lblExitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblExitButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlNavBarLayout = new javax.swing.GroupLayout(pnlNavBar);
        pnlNavBar.setLayout(pnlNavBarLayout);
        pnlNavBarLayout.setHorizontalGroup(
            pnlNavBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNavBarLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(lblManageRoomButton)
                .addGap(37, 37, 37)
                .addComponent(lblCheckInButton)
                .addGap(45, 45, 45)
                .addComponent(lblCheckOutButton)
                .addGap(43, 43, 43)
                .addComponent(lblBillButton)
                .addGap(44, 44, 44)
                .addComponent(lblDashBoardButton)
                .addGap(34, 34, 34)
                .addComponent(lblLogOutButton)
                .addGap(53, 53, 53)
                .addComponent(lblExitButton)
                .addContainerGap(105, Short.MAX_VALUE))
        );
        pnlNavBarLayout.setVerticalGroup(
            pnlNavBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNavBarLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(pnlNavBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCheckOutButton)
                    .addComponent(lblBillButton)
                    .addGroup(pnlNavBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblLogOutButton)
                        .addComponent(lblDashBoardButton)
                        .addComponent(lblExitButton))
                    .addComponent(lblCheckInButton)
                    .addComponent(lblManageRoomButton))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pnlMainForAdmin.add(pnlNavBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 100));

        lblManageRoomsBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/manageRoomBackground.jpg"))); // NOI18N

        pnlMainBodyForManageRooms.setLayout(new java.awt.CardLayout());

        pnlFormForManageRooms.setBackground(new java.awt.Color(234, 216, 177));

        lblRoomNumber.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRoomNumber.setForeground(new java.awt.Color(102, 102, 102));
        lblRoomNumber.setText("Room Number");

        lblRoomType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRoomType.setForeground(new java.awt.Color(102, 102, 102));
        lblRoomType.setText("Room Type");

        cmbRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AC", "Non-AC", " " }));

        lblBedType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblBedType.setForeground(new java.awt.Color(102, 102, 102));
        lblBedType.setText("Bed Type");

        btnGroupBedType.add(rbSingleBed);
        rbSingleBed.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbSingleBed.setForeground(new java.awt.Color(102, 102, 102));
        rbSingleBed.setText("Single-bed");

        btnGroupBedType.add(rbDoubleBed);
        rbDoubleBed.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbDoubleBed.setForeground(new java.awt.Color(102, 102, 102));
        rbDoubleBed.setText("Double-bed");

        lblPrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(102, 102, 102));
        lblPrice.setText("Price");

        lblRoomGrade.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRoomGrade.setForeground(new java.awt.Color(102, 102, 102));
        lblRoomGrade.setText("Room Grade");

        cmbRoomGrade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Standard", "Deluxe", "Family Suite", "Presidential Suite", " ", " ", " " }));

        lblStatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(102, 102, 102));
        lblStatus.setText("Status");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Booked", "Not-Booked", " " }));

        btnUpdateRoomDetails.setBackground(new java.awt.Color(58, 109, 140));
        btnUpdateRoomDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdateRoomDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateRoomDetails.setText("Update Room Details");
        btnUpdateRoomDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateRoomDetailsActionPerformed(evt);
            }
        });

        btnClearRoomFields.setBackground(new java.awt.Color(58, 109, 140));
        btnClearRoomFields.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClearRoomFields.setForeground(new java.awt.Color(255, 255, 255));
        btnClearRoomFields.setText("Clear");
        btnClearRoomFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearRoomFieldsActionPerformed(evt);
            }
        });

        btnViewTable.setBackground(new java.awt.Color(58, 109, 140));
        btnViewTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnViewTable.setForeground(new java.awt.Color(255, 255, 255));
        btnViewTable.setText("View Table");
        btnViewTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTableActionPerformed(evt);
            }
        });

        btnAddRoomDetails1.setBackground(new java.awt.Color(58, 109, 140));
        btnAddRoomDetails1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddRoomDetails1.setForeground(new java.awt.Color(255, 255, 255));
        btnAddRoomDetails1.setText("Add Room Details");
        btnAddRoomDetails1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRoomDetailsActionPerformed(evt);
            }
        });

        btnDeleteRoomDetails.setBackground(new java.awt.Color(58, 109, 140));
        btnDeleteRoomDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeleteRoomDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteRoomDetails.setText("Delete Room Details");
        btnDeleteRoomDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRoomDetailsActionPerformed(evt);
            }
        });

        btnBackToHomePage.setBackground(new java.awt.Color(58, 109, 140));
        btnBackToHomePage.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBackToHomePage.setForeground(new java.awt.Color(255, 255, 255));
        btnBackToHomePage.setText("Back to Home Page");
        btnBackToHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToHomePageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFormForManageRoomsLayout = new javax.swing.GroupLayout(pnlFormForManageRooms);
        pnlFormForManageRooms.setLayout(pnlFormForManageRoomsLayout);
        pnlFormForManageRoomsLayout.setHorizontalGroup(
            pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormForManageRoomsLayout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFormForManageRoomsLayout.createSequentialGroup()
                        .addComponent(lblRoomGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(158, 158, 158))
                    .addGroup(pnlFormForManageRoomsLayout.createSequentialGroup()
                        .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtFieldRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblBedType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFormForManageRoomsLayout.createSequentialGroup()
                                .addComponent(rbSingleBed)
                                .addGap(62, 62, 62)
                                .addComponent(rbDoubleBed)))
                        .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFormForManageRoomsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlFormForManageRoomsLayout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pnlFormForManageRoomsLayout.createSequentialGroup()
                                        .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(pnlFormForManageRoomsLayout.createSequentialGroup()
                        .addComponent(cmbRoomGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(147, 147, 147))
            .addGroup(pnlFormForManageRoomsLayout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnClearRoomFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddRoomDetails1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(65, 65, 65)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUpdateRoomDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnViewTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(77, 77, 77)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDeleteRoomDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBackToHomePage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlFormForManageRoomsLayout.setVerticalGroup(
            pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormForManageRoomsLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRoomGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbRoomGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBedType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSingleBed)
                    .addComponent(rbDoubleBed)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateRoomDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddRoomDetails1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteRoomDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewTable, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearRoomFields, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBackToHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMainBodyForManageRooms.add(pnlFormForManageRooms, "card2");

        pnlViewTableForRooms.setBackground(new java.awt.Color(234, 216, 177));

        tblRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room Number", "Room Type", "Room Grade", "Bed Type", "Price", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRoom);

        btnSwitchPanel.setBackground(new java.awt.Color(153, 51, 0));
        btnSwitchPanel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnSwitchPanel.setForeground(new java.awt.Color(255, 255, 255));
        btnSwitchPanel.setText("Switch Panel");
        btnSwitchPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwitchPanelActionPerformed(evt);
            }
        });

        cmbSortInRoom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RoomNumber", "Price" }));
        cmbSortInRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSortInRoomActionPerformed(evt);
            }
        });

        lblSortBy.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblSortBy.setForeground(new java.awt.Color(204, 51, 0));
        lblSortBy.setText("Sort By:");

        btnAscendingOrDescendingInRoom.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAscendingOrDescendingInRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/DescendingLogo.png"))); // NOI18N
        btnAscendingOrDescendingInRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAscendingOrDescendingInRoomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlViewTableForRoomsLayout = new javax.swing.GroupLayout(pnlViewTableForRooms);
        pnlViewTableForRooms.setLayout(pnlViewTableForRoomsLayout);
        pnlViewTableForRoomsLayout.setHorizontalGroup(
            pnlViewTableForRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlViewTableForRoomsLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(pnlViewTableForRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 841, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlViewTableForRoomsLayout.createSequentialGroup()
                        .addComponent(btnSwitchPanel)
                        .addGap(101, 101, 101)
                        .addComponent(lblSortBy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbSortInRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAscendingOrDescendingInRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        pnlViewTableForRoomsLayout.setVerticalGroup(
            pnlViewTableForRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlViewTableForRoomsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pnlViewTableForRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlViewTableForRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSwitchPanel)
                        .addComponent(cmbSortInRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSortBy))
                    .addComponent(btnAscendingOrDescendingInRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        pnlMainBodyForManageRooms.add(pnlViewTableForRooms, "card3");

        javax.swing.GroupLayout pnlForManageRoomsLayout = new javax.swing.GroupLayout(pnlForManageRooms);
        pnlForManageRooms.setLayout(pnlForManageRoomsLayout);
        pnlForManageRoomsLayout.setHorizontalGroup(
            pnlForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlForManageRoomsLayout.createSequentialGroup()
                .addGroup(pnlForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlForManageRoomsLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblManageRoomsBackground))
                    .addComponent(pnlMainBodyForManageRooms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlForManageRoomsLayout.setVerticalGroup(
            pnlForManageRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlForManageRoomsLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(lblManageRoomsBackground)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMainBodyForManageRooms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tbPaneMain.addTab("tab1", pnlForManageRooms);

        lblManageCheckInBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/MANAGE CHECK-INs.jpg"))); // NOI18N

        pnlBodyMainForCheckIn.setLayout(new java.awt.CardLayout());

        pnlFormForCheckIn.setBackground(new java.awt.Color(234, 216, 177));

        cmbMealPlanForCheckIn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Breakfast only", "Full Board", "No Meal", " " }));

        lblMealPlanForCheckIn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblMealPlanForCheckIn.setForeground(new java.awt.Color(102, 102, 102));
        lblMealPlanForCheckIn.setText("Meal Plan");

        lblCheckInPreference.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCheckInPreference.setForeground(new java.awt.Color(102, 102, 102));
        lblCheckInPreference.setText("Check In Time Preference");

        btnGroupGender.add(rbMaleInCheckIn);
        rbMaleInCheckIn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbMaleInCheckIn.setForeground(new java.awt.Color(102, 102, 102));
        rbMaleInCheckIn.setText("Male");

        btnGroupGender.add(rbFemaleInCheckIn);
        rbFemaleInCheckIn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbFemaleInCheckIn.setForeground(new java.awt.Color(102, 102, 102));
        rbFemaleInCheckIn.setText("Female");

        lblNationality.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblNationality.setForeground(new java.awt.Color(102, 102, 102));
        lblNationality.setText("Nationality");

        lblGender.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblGender.setForeground(new java.awt.Color(102, 102, 102));
        lblGender.setText("Gender");

        btnGroupCheckInPreference.add(rbEvening);
        rbEvening.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbEvening.setForeground(new java.awt.Color(102, 102, 102));
        rbEvening.setText("Evening");

        btnGroupCheckInPreference.add(rbMorning);
        rbMorning.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbMorning.setForeground(new java.awt.Color(102, 102, 102));
        rbMorning.setText("Morning");

        lblRoomNumber2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRoomNumber2.setForeground(new java.awt.Color(102, 102, 102));
        lblRoomNumber2.setText("Room Number");

        lblCheckInDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCheckInDate.setForeground(new java.awt.Color(102, 102, 102));
        lblCheckInDate.setText("Check-In Date");

        btnCheckInNow.setBackground(new java.awt.Color(58, 109, 140));
        btnCheckInNow.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCheckInNow.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckInNow.setText("Check In Now");
        btnCheckInNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckInNowActionPerformed(evt);
            }
        });

        btnViewTableCheckIn.setBackground(new java.awt.Color(58, 109, 140));
        btnViewTableCheckIn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnViewTableCheckIn.setForeground(new java.awt.Color(255, 255, 255));
        btnViewTableCheckIn.setText("View Table");
        btnViewTableCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTableCheckInActionPerformed(evt);
            }
        });

        btnClearCheckInFields.setBackground(new java.awt.Color(58, 109, 140));
        btnClearCheckInFields.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClearCheckInFields.setForeground(new java.awt.Color(255, 255, 255));
        btnClearCheckInFields.setText("Clear");
        btnClearCheckInFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearCheckInFieldsActionPerformed(evt);
            }
        });

        lblMobileNumber.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblMobileNumber.setForeground(new java.awt.Color(102, 102, 102));
        lblMobileNumber.setText("Mobile Number");

        lblCustomerName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCustomerName.setForeground(new java.awt.Color(102, 102, 102));
        lblCustomerName.setText("Customer Name");

        btnBackToHomeFromCheckIn.setBackground(new java.awt.Color(58, 109, 140));
        btnBackToHomeFromCheckIn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBackToHomeFromCheckIn.setForeground(new java.awt.Color(255, 255, 255));
        btnBackToHomeFromCheckIn.setText("Back to Home Page");
        btnBackToHomeFromCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToHomeFromCheckInActionPerformed(evt);
            }
        });

        btnDeleteCheckInDetails.setBackground(new java.awt.Color(58, 109, 140));
        btnDeleteCheckInDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeleteCheckInDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteCheckInDetails.setText("Delete Details");
        btnDeleteCheckInDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckInDetailsActionPerformed(evt);
            }
        });

        btnUpdateCheckInDetails.setBackground(new java.awt.Color(58, 109, 140));
        btnUpdateCheckInDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdateCheckInDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateCheckInDetails.setText("Update Details");
        btnUpdateCheckInDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCheckInDetailsActionPerformed(evt);
            }
        });

        jdcForCheckInDate.setDateFormatString("yyyy-MM-dd");
        jdcForCheckInDate.setMinSelectableDate(new java.util.Date(-62135786623000L));

        btnGroupCheckInPreference.add(rbAfternoon);
        rbAfternoon.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbAfternoon.setForeground(new java.awt.Color(102, 102, 102));
        rbAfternoon.setText("Afternoon");

        javax.swing.GroupLayout pnlFormForCheckInLayout = new javax.swing.GroupLayout(pnlFormForCheckIn);
        pnlFormForCheckIn.setLayout(pnlFormForCheckInLayout);
        pnlFormForCheckInLayout.setHorizontalGroup(
            pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormForCheckInLayout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormForCheckInLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCheckInNow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClearCheckInFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                        .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnViewTableCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdateCheckInDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(67, 67, 67)
                        .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeleteCheckInDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBackToHomeFromCheckIn))
                        .addGap(249, 249, 249))
                    .addGroup(pnlFormForCheckInLayout.createSequentialGroup()
                        .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(pnlFormForCheckInLayout.createSequentialGroup()
                                    .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(pnlFormForCheckInLayout.createSequentialGroup()
                                            .addComponent(rbMaleInCheckIn)
                                            .addGap(30, 30, 30)
                                            .addComponent(rbFemaleInCheckIn)))
                                    .addGap(326, 326, 326))
                                .addComponent(lblCustomerName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtFieldCustomerName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlFormForCheckInLayout.createSequentialGroup()
                                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRoomNumber2)
                                    .addComponent(txtFieldRoomNumberCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jdcForCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCheckInDate))
                                .addGap(43, 43, 43)))
                        .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtFieldNationalityInCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                                .addComponent(txtFieldMobileNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                                .addComponent(lblMobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbMealPlanForCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMealPlanForCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlFormForCheckInLayout.createSequentialGroup()
                                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFormForCheckInLayout.createSequentialGroup()
                                        .addComponent(rbMorning)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(rbAfternoon))
                                    .addComponent(lblCheckInPreference, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addComponent(rbEvening, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlFormForCheckInLayout.setVerticalGroup(
            pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormForCheckInLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldMobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldNationalityInCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbMaleInCheckIn)
                    .addComponent(rbFemaleInCheckIn))
                .addGap(18, 18, 18)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCheckInPreference, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbMorning)
                        .addComponent(rbEvening)
                        .addComponent(rbAfternoon))
                    .addComponent(jdcForCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRoomNumber2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMealPlanForCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldRoomNumberCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMealPlanForCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckInNow, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteCheckInDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateCheckInDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBackToHomeFromCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearCheckInFields, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewTableCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pnlBodyMainForCheckIn.add(pnlFormForCheckIn, "card2");

        pnlViewTableForCheckIn.setBackground(new java.awt.Color(234, 216, 177));

        tblCustomerCheckIn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Name", "Mobile Number", "Gender", "Nationality", "Meal Plan", "Check In Preference", "Room Number", "Check-In Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCustomerCheckIn);
        if (tblCustomerCheckIn.getColumnModel().getColumnCount() > 0) {
            tblCustomerCheckIn.getColumnModel().getColumn(0).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(1).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(2).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(3).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(4).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(7).setResizable(false);
        }

        btnAddRoomDetails2.setBackground(new java.awt.Color(58, 109, 140));
        btnAddRoomDetails2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddRoomDetails2.setForeground(new java.awt.Color(255, 255, 255));
        btnAddRoomDetails2.setText("Add Room Details");

        btnSwitchPanel1.setBackground(new java.awt.Color(153, 51, 0));
        btnSwitchPanel1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnSwitchPanel1.setForeground(new java.awt.Color(255, 255, 255));
        btnSwitchPanel1.setText("Switch Panel");
        btnSwitchPanel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwitchPanel1ActionPerformed(evt);
            }
        });

        cmbSortInCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Customer Name" }));
        cmbSortInCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSortInCustomerActionPerformed(evt);
            }
        });

        lblSortBy1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblSortBy1.setForeground(new java.awt.Color(204, 51, 0));
        lblSortBy1.setText("Sort By:");

        btnAscendingOrDescendingInCustomer.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAscendingOrDescendingInCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/DescendingLogo.png"))); // NOI18N
        btnAscendingOrDescendingInCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAscendingOrDescendingInCustomerActionPerformed(evt);
            }
        });

        txtFieldForCustomerSearch.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        txtFieldForCustomerSearch.setForeground(new java.awt.Color(204, 204, 204));
        txtFieldForCustomerSearch.setText("Search any customer name");
        txtFieldForCustomerSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFieldForCustomerSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldForCustomerSearchFocusLost(evt);
            }
        });

        btnSearchCustomer.setBackground(new java.awt.Color(0, 153, 255));
        btnSearchCustomer.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearchCustomer.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/searchIcon.png"))); // NOI18N
        btnSearchCustomer.setText("Search");
        btnSearchCustomer.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnSearchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCustomerActionPerformed(evt);
            }
        });

        btnViewAllDataForCheckIn.setBackground(new java.awt.Color(153, 153, 153));
        btnViewAllDataForCheckIn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnViewAllDataForCheckIn.setForeground(new java.awt.Color(255, 255, 255));
        btnViewAllDataForCheckIn.setText("View All Data");
        btnViewAllDataForCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllDataForCheckInActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlViewTableForCheckInLayout = new javax.swing.GroupLayout(pnlViewTableForCheckIn);
        pnlViewTableForCheckIn.setLayout(pnlViewTableForCheckInLayout);
        pnlViewTableForCheckInLayout.setHorizontalGroup(
            pnlViewTableForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlViewTableForCheckInLayout.createSequentialGroup()
                .addGroup(pnlViewTableForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlViewTableForCheckInLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btnSwitchPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(lblSortBy1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbSortInCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAscendingOrDescendingInCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(txtFieldForCustomerSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearchCustomer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewAllDataForCheckIn))
                    .addGroup(pnlViewTableForCheckInLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1037, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(pnlViewTableForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlViewTableForCheckInLayout.createSequentialGroup()
                    .addGap(442, 442, 442)
                    .addComponent(btnAddRoomDetails2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(442, 442, 442)))
        );
        pnlViewTableForCheckInLayout.setVerticalGroup(
            pnlViewTableForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlViewTableForCheckInLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlViewTableForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbSortInCustomer)
                    .addComponent(btnAscendingOrDescendingInCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnSwitchPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSortBy1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlViewTableForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSearchCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(btnViewAllDataForCheckIn))
                    .addComponent(txtFieldForCustomerSearch))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlViewTableForCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlViewTableForCheckInLayout.createSequentialGroup()
                    .addGap(213, 213, 213)
                    .addComponent(btnAddRoomDetails2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(224, Short.MAX_VALUE)))
        );

        pnlBodyMainForCheckIn.add(pnlViewTableForCheckIn, "card3");

        javax.swing.GroupLayout pnlForCustomerCheckInLayout = new javax.swing.GroupLayout(pnlForCustomerCheckIn);
        pnlForCustomerCheckIn.setLayout(pnlForCustomerCheckInLayout);
        pnlForCustomerCheckInLayout.setHorizontalGroup(
            pnlForCustomerCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlForCustomerCheckInLayout.createSequentialGroup()
                .addGroup(pnlForCustomerCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblManageCheckInBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBodyMainForCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlForCustomerCheckInLayout.setVerticalGroup(
            pnlForCustomerCheckInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlForCustomerCheckInLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(lblManageCheckInBackGround)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBodyMainForCheckIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbPaneMain.addTab("tab2", pnlForCustomerCheckIn);

        lblManageCheckOutBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/MANAGE CHECK-OUTs.jpg"))); // NOI18N

        pnlMainBodyForCustomerCheckOut.setLayout(new java.awt.CardLayout());

        pnlFormForCheckOutForm.setBackground(new java.awt.Color(234, 216, 177));

        lblRoomNumber1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblRoomNumber1.setForeground(new java.awt.Color(102, 102, 102));
        lblRoomNumber1.setText("Room Number");

        btnSearch.setBackground(new java.awt.Color(153, 0, 0));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");

        btnCheckOutNow.setBackground(new java.awt.Color(58, 109, 140));
        btnCheckOutNow.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCheckOutNow.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckOutNow.setText("Check Out Now");
        btnCheckOutNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutNowActionPerformed(evt);
            }
        });

        btnClear1.setBackground(new java.awt.Color(153, 0, 0));
        btnClear1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClear1.setForeground(new java.awt.Color(255, 255, 255));
        btnClear1.setText("Clear");

        btnViewTableForCheckOutDetails.setBackground(new java.awt.Color(58, 109, 140));
        btnViewTableForCheckOutDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnViewTableForCheckOutDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnViewTableForCheckOutDetails.setText("View Table");
        btnViewTableForCheckOutDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTableForCheckOutDetailsActionPerformed(evt);
            }
        });

        lblCustomerName1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblCustomerName1.setForeground(new java.awt.Color(102, 102, 102));
        lblCustomerName1.setText("Customer Name");

        lblMobileNumber1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblMobileNumber1.setForeground(new java.awt.Color(102, 102, 102));
        lblMobileNumber1.setText("Mobile Number");

        lblCheckInDate1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblCheckInDate1.setForeground(new java.awt.Color(102, 102, 102));
        lblCheckInDate1.setText("Check-In Date");

        lblCheckOutDate.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblCheckOutDate.setForeground(new java.awt.Color(102, 102, 102));
        lblCheckOutDate.setText("Check-Out Date");

        lblPricePerDay.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblPricePerDay.setForeground(new java.awt.Color(102, 102, 102));
        lblPricePerDay.setText("Price Per Day");

        lblTotalAmount.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblTotalAmount.setForeground(new java.awt.Color(102, 102, 102));
        lblTotalAmount.setText("Total Amount");

        btnBackToHomePage1.setBackground(new java.awt.Color(58, 109, 140));
        btnBackToHomePage1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBackToHomePage1.setForeground(new java.awt.Color(255, 255, 255));
        btnBackToHomePage1.setText("Back To Home Page");
        btnBackToHomePage1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToHomePage1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFormForCheckOutFormLayout = new javax.swing.GroupLayout(pnlFormForCheckOutForm);
        pnlFormForCheckOutForm.setLayout(pnlFormForCheckOutFormLayout);
        pnlFormForCheckOutFormLayout.setHorizontalGroup(
            pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRoomNumber1)
                            .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                                .addComponent(txtFieldRoomNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(btnSearch))))
                    .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                                        .addComponent(txtFieldCustomerName1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(167, 167, 167))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFormForCheckOutFormLayout.createSequentialGroup()
                                        .addComponent(btnCheckOutNow)
                                        .addGap(47, 47, 47)
                                        .addComponent(btnClear1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(43, 43, 43)))
                                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFieldMobileNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblMobileNumber1)
                                    .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(btnViewTableForCheckOutDetails))))
                            .addComponent(lblCustomerName1)
                            .addComponent(lblCheckInDate1)
                            .addComponent(lblPricePerDay)
                            .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jdcForCheckInDate1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtFieldPricePerDay, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
                                .addGap(167, 167, 167)
                                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtFieldTotalAmount)
                                    .addComponent(lblTotalAmount)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFormForCheckOutFormLayout.createSequentialGroup()
                                        .addComponent(lblCheckOutDate)
                                        .addGap(129, 129, 129))
                                    .addComponent(jdcForCheckOutDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                        .addGap(405, 405, 405)
                        .addComponent(btnBackToHomePage1)))
                .addContainerGap(223, Short.MAX_VALUE))
        );
        pnlFormForCheckOutFormLayout.setVerticalGroup(
            pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(lblRoomNumber1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldRoomNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(11, 11, 11)
                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerName1)
                    .addComponent(lblMobileNumber1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldCustomerName1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldMobileNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCheckInDate1)
                    .addComponent(lblCheckOutDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jdcForCheckOutDate, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(jdcForCheckInDate1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPricePerDay)
                    .addComponent(lblTotalAmount))
                .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFieldPricePerDay, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFieldTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlFormForCheckOutFormLayout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(pnlFormForCheckOutFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCheckOutNow, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnViewTableForCheckOutDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBackToHomePage1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMainBodyForCustomerCheckOut.add(pnlFormForCheckOutForm, "card2");

        pnlTableForCheckOut.setBackground(new java.awt.Color(234, 216, 177));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Customer Name", "Mobile Number", "Room Number", "Check In Date", "Bill ID", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);

        switchPanelFromCheckOutTable.setBackground(new java.awt.Color(153, 51, 0));
        switchPanelFromCheckOutTable.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        switchPanelFromCheckOutTable.setForeground(new java.awt.Color(255, 255, 255));
        switchPanelFromCheckOutTable.setText("Switch Panel");
        switchPanelFromCheckOutTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchPanelFromCheckOutTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTableForCheckOutLayout = new javax.swing.GroupLayout(pnlTableForCheckOut);
        pnlTableForCheckOut.setLayout(pnlTableForCheckOutLayout);
        pnlTableForCheckOutLayout.setHorizontalGroup(
            pnlTableForCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableForCheckOutLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(pnlTableForCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(switchPanelFromCheckOutTable)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 924, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        pnlTableForCheckOutLayout.setVerticalGroup(
            pnlTableForCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTableForCheckOutLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(switchPanelFromCheckOutTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pnlMainBodyForCustomerCheckOut.add(pnlTableForCheckOut, "card3");

        javax.swing.GroupLayout pnlForCustomerCheckOutLayout = new javax.swing.GroupLayout(pnlForCustomerCheckOut);
        pnlForCustomerCheckOut.setLayout(pnlForCustomerCheckOutLayout);
        pnlForCustomerCheckOutLayout.setHorizontalGroup(
            pnlForCustomerCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlForCustomerCheckOutLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlForCustomerCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblManageCheckOutBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlMainBodyForCustomerCheckOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        pnlForCustomerCheckOutLayout.setVerticalGroup(
            pnlForCustomerCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlForCustomerCheckOutLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(lblManageCheckOutBackground)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMainBodyForCustomerCheckOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbPaneMain.addTab("tab3", pnlForCustomerCheckOut);

        pnlForDashBoard.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 31, 63));

        lblTitleAdminDashBoard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/adminDashBoard.png"))); // NOI18N

        pnlForTotalRooms.setBackground(new java.awt.Color(58, 109, 140));

        lblTotalRoomsTitleAndIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Add a heading.png"))); // NOI18N
        lblTotalRoomsTitleAndIcon.setText("jLabel2");

        lblForTotalRoomsData.setFont(new java.awt.Font("Segoe UI", 1, 80)); // NOI18N
        lblForTotalRoomsData.setForeground(new java.awt.Color(255, 255, 255));
        lblForTotalRoomsData.setText("0");

        javax.swing.GroupLayout pnlForTotalRoomsLayout = new javax.swing.GroupLayout(pnlForTotalRooms);
        pnlForTotalRooms.setLayout(pnlForTotalRoomsLayout);
        pnlForTotalRoomsLayout.setHorizontalGroup(
            pnlForTotalRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlForTotalRoomsLayout.createSequentialGroup()
                .addComponent(lblTotalRoomsTitleAndIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblForTotalRoomsData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlForTotalRoomsLayout.setVerticalGroup(
            pnlForTotalRoomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTotalRoomsTitleAndIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlForTotalRoomsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblForTotalRoomsData, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        pnlForTotalCheckIns.setBackground(new java.awt.Color(51, 0, 51));
        pnlForTotalCheckIns.setPreferredSize(new java.awt.Dimension(325, 256));

        lblTotalCheckInTitleAndIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/totalCheckIns.png"))); // NOI18N

        lblTotalCheckInData.setFont(new java.awt.Font("Segoe UI", 1, 80)); // NOI18N
        lblTotalCheckInData.setForeground(new java.awt.Color(255, 255, 255));
        lblTotalCheckInData.setText("0");

        javax.swing.GroupLayout pnlForTotalCheckInsLayout = new javax.swing.GroupLayout(pnlForTotalCheckIns);
        pnlForTotalCheckIns.setLayout(pnlForTotalCheckInsLayout);
        pnlForTotalCheckInsLayout.setHorizontalGroup(
            pnlForTotalCheckInsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlForTotalCheckInsLayout.createSequentialGroup()
                .addComponent(lblTotalCheckInTitleAndIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(lblTotalCheckInData, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 34, Short.MAX_VALUE))
        );
        pnlForTotalCheckInsLayout.setVerticalGroup(
            pnlForTotalCheckInsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlForTotalCheckInsLayout.createSequentialGroup()
                .addComponent(lblTotalCheckInTitleAndIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlForTotalCheckInsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblTotalCheckInData, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        pnlForTotalRevenue.setBackground(new java.awt.Color(0, 106, 103));

        lblTotalRevenueTitleAndIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/revenueIcon.png"))); // NOI18N

        lblTotalRevenueData.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        lblTotalRevenueData.setForeground(new java.awt.Color(255, 255, 255));
        lblTotalRevenueData.setText("Rs 50,000");

        javax.swing.GroupLayout pnlForTotalRevenueLayout = new javax.swing.GroupLayout(pnlForTotalRevenue);
        pnlForTotalRevenue.setLayout(pnlForTotalRevenueLayout);
        pnlForTotalRevenueLayout.setHorizontalGroup(
            pnlForTotalRevenueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlForTotalRevenueLayout.createSequentialGroup()
                .addComponent(lblTotalRevenueTitleAndIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotalRevenueData)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        pnlForTotalRevenueLayout.setVerticalGroup(
            pnlForTotalRevenueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTotalRevenueTitleAndIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlForTotalRevenueLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTotalRevenueData, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );

        pnlForTotalCustomers.setBackground(new java.awt.Color(166, 166, 166));

        lblTotalCustomerTitleAndIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/TotalRoomsAvailable (2).png"))); // NOI18N

        lblTotalCustomersData.setFont(new java.awt.Font("Segoe UI", 1, 80)); // NOI18N
        lblTotalCustomersData.setForeground(new java.awt.Color(255, 255, 255));
        lblTotalCustomersData.setText("25");

        javax.swing.GroupLayout pnlForTotalCustomersLayout = new javax.swing.GroupLayout(pnlForTotalCustomers);
        pnlForTotalCustomers.setLayout(pnlForTotalCustomersLayout);
        pnlForTotalCustomersLayout.setHorizontalGroup(
            pnlForTotalCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlForTotalCustomersLayout.createSequentialGroup()
                .addComponent(lblTotalCustomerTitleAndIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblTotalCustomersData)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlForTotalCustomersLayout.setVerticalGroup(
            pnlForTotalCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTotalCustomerTitleAndIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlForTotalCustomersLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTotalCustomersData, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlForTotalRooms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlForTotalRevenue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlForTotalCheckIns, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlForTotalCustomers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(314, 314, 314)
                        .addComponent(lblTitleAdminDashBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(197, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblTitleAdminDashBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlForTotalRooms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlForTotalCheckIns, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlForTotalRevenue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlForTotalCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        pnlForDashBoard.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 104, 1000, -1));

        tbPaneMain.addTab("tab4", pnlForDashBoard);

        pnlMainForAdmin.add(tbPaneMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -40, 1000, 780));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMainForAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMainForAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the update room details button click. Validates input and updates
     * room details if valid.
     */
    private void btnUpdateRoomDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateRoomDetailsActionPerformed
        // TODO add your handling code here:
        // Get input values
        String roomNumberStr = txtFieldRoomNumber.getText().trim();
        String roomType = cmbRoomType.getSelectedItem().toString().trim();
        String roomGrade = cmbRoomGrade.getSelectedItem().toString().trim();
        String priceStr = txtFieldPrice.getText().trim();
        String bedType = rbSingleBed.isSelected() ? "Single-bed" : (rbDoubleBed.isSelected() ? "Double-bed" : "");
        String status = cmbStatus.getSelectedItem().toString().trim();

        // Validate Room Number
        if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
        } else if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-3 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
        } // Validate other fields (roomType, roomGrade, priceStr, bedType, status)
        else if (priceStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Price is required. Please enter a valid price.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldPrice.requestFocus();
        } else if (!ValidationUtil.isValidPrice(priceStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Price. It must be a positive number with optional decimal points (up to 2 decimal places).", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldPrice.requestFocus();
        } else {
            // Proceed to update data
            int roomNumber = Integer.parseInt(roomNumberStr);  // Convert to int
            double price = Double.parseDouble(priceStr);         // Convert to double

            // Call the method to update both ArrayList and JTable
            updateRoomData(roomNumber, roomType, roomGrade, bedType, price, status);
        }
    }//GEN-LAST:event_btnUpdateRoomDetailsActionPerformed
    /**
     * Clears input fields in the room management form.
     */
    private void btnClearRoomFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearRoomFieldsActionPerformed
        // TODO add your handling code here:
        txtFieldRoomNumber.setText("");  // Clears the text field for room number
        cmbRoomType.setSelectedIndex(0);  // Reset the room type dropdown to the default (first item)
        cmbRoomGrade.setSelectedIndex(0); // Reset the room grade dropdown to the default (first item)
        txtFieldPrice.setText("");  // Clears the text field for price
        btnGroupBedType.clearSelection();    // Unselects any selected radio buttons in the group
        cmbStatus.setSelectedIndex(0);  // Reset the status dropdown to the default (first item)
        txtFieldRoomNumber.requestFocus();  // Focuses back on the room number input field
    }//GEN-LAST:event_btnClearRoomFieldsActionPerformed

    /**
     * Switches to the room table view panel.
     */
    private void btnViewTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTableActionPerformed
        pnlFormForManageRooms.setVisible(false);
        pnlViewTableForRooms.setVisible(true);
    }//GEN-LAST:event_btnViewTableActionPerformed

    /**
     * Adds room details to the list and table. Validates input and checks for
     * duplicates.
     */
    private void btnAddRoomDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRoomDetailsActionPerformed

        String roomNumberStr = txtFieldRoomNumber.getText().trim();
        String roomType = cmbRoomType.getSelectedItem().toString().trim();
        String roomGrade = cmbRoomGrade.getSelectedItem().toString().trim();
        String priceStr = txtFieldPrice.getText().trim();
        String bedType = rbSingleBed.isSelected() ? "Single-bed" : (rbDoubleBed.isSelected() ? "Double-bed" : "");
        String status = cmbStatus.getSelectedItem().toString().trim();

        // Validate Room Number
        if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-3 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
            return;
        }
        if (roomType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Type is required. Please select either AC or Non-AC.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomType.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidRoomType(roomType)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Type. Select either 'AC' or 'Non-AC'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomType.requestFocus();
            return;
        }
        if (roomGrade.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Grade is required. 'Standard', 'Deluxe', 'Family Suite' or 'Presidential'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomGrade.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidRoomGrade(roomGrade)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Grade. It must be one of 'Standard', 'Deluxe', 'Family Suite' or 'Presidential'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomGrade.requestFocus();
            return;
        }
        if (priceStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Price is required. Please enter a valid price.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldPrice.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidPrice(priceStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Price. It must be a positive number with optional decimal points (up to 2 decimal places).", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldPrice.requestFocus();
            return;
        }
        if (bedType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bed Type is required. Please select either Single-bed or Double-bed.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!ValidationUtil.isValidBedType(bedType)) {
            JOptionPane.showMessageDialog(this, "Invalid Bed Type. It must be either 'Single-bed' or 'Double-bed'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (status.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Status is required. Please select from 'Available' or 'Booked'", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbStatus.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidStatus(status)) {
            JOptionPane.showMessageDialog(this, "Invalid Status. It must be one of 'Booked', or 'Not-Booked'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbStatus.requestFocus();
            return;
        }

        // Convert Room Number and Price
        int roomNumber = Integer.parseInt(roomNumberStr); // Convert to int
        double price = Double.parseDouble(priceStr);      // Convert to double

        // Check for duplicate room number
        for (RoomModel existingRoom : roomList) {
            if (existingRoom.getRoomNumber() == roomNumber) {
                JOptionPane.showMessageDialog(this, "Room Number " + roomNumber + " already exists. Please enter a different room number.", "Duplicate Error", JOptionPane.ERROR_MESSAGE);
                txtFieldRoomNumber.requestFocus();
                return;
            }
        }

        // Proceed to save the room details if no duplicates found
        RoomModel room1 = new RoomModel(roomNumber, roomType, roomGrade, bedType, price, status);
        addRoomData(room1);
        JOptionPane.showMessageDialog(this, "Room details successfully added!", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnAddRoomDetailsActionPerformed

    /**
     * Deletes a room from the list and table. Validates room number before
     * deletion.
     */
    private void btnDeleteRoomDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRoomDetailsActionPerformed

        // Get the room number from the input field
        String roomNumberStr = txtFieldRoomNumber.getText().trim();

        // Validate Room Number
        if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();  // Focus on room number input field
        } else if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-3 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();  // Focus on room number input field
        } else {
            // Convert the room number to int type
            int roomNumber = Integer.parseInt(roomNumberStr);

            // Call the method to delete the room from both ArrayList and JTable
            deleteRoomData(roomNumber);
        }
    }//GEN-LAST:event_btnDeleteRoomDetailsActionPerformed
    /**
     * Handles the action of navigating back to the home page.
     *
     * @param evt ActionEvent triggered when the button is clicked
     * @return String - This method does not return a value
     * @return boolean - This method does not return true or false
     * @throws None
     */
    private void btnBackToHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToHomePageActionPerformed
        // TODO add your handling code here:
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackToHomePageActionPerformed

    /**
     * Switches the visible panel to the "Manage Rooms" form after viewing table
     *
     * @param evt ActionEvent triggered when the button is clicked
     * @return String - This method does not return a value
     * @return boolean - This method does not return true or false
     * @throws None
     */
    private void btnSwitchPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwitchPanelActionPerformed
        // TODO add your handling code here:
        pnlFormForManageRooms.setVisible(true);
        pnlViewTableForRooms.setVisible(false);
    }//GEN-LAST:event_btnSwitchPanelActionPerformed

    /**
     * Performs the check-in operation for a customer.
     *
     * @param evt ActionEvent triggered when the button is clicked
     * @return String - This method does not return a value
     * @return boolean - This method does not return true or false
     * @throws None
     */
    private void btnCheckInNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckInNowActionPerformed

        // Retrieve input values
        String customerName = txtFieldCustomerName.getText().trim();
        String mobileNumber = txtFieldMobileNumber.getText().trim();
        String gender = rbMaleInCheckIn.isSelected() ? "Male" : (rbFemaleInCheckIn.isSelected() ? "Female" : "");
        String nationality = txtFieldNationalityInCheckIn.getText().trim();
        String mealPlan = cmbMealPlanForCheckIn.getSelectedItem().toString().trim();
        // Validate Check-In Preference
        String checkInPreference = null;

        if (rbMorning.isSelected()) {
            checkInPreference = "Morning";
        } else if (rbAfternoon.isSelected()) {
            checkInPreference = "Afternoon";
        } else if (rbEvening.isSelected()) {
            checkInPreference = "Evening";
        }

// Check if none of the radio buttons are selected
        if (checkInPreference == null) {
            JOptionPane.showMessageDialog(
                    this,
                    "Check-In Preference is required. Please select either Morning, Afternoon, or Evening.",
                    "Validation Error",
                    JOptionPane.ERROR_MESSAGE
            );
            return; // Stop further execution
        }
        String roomNumberStr = txtFieldRoomNumberCheckIn.getText().trim();

        // Get the selected check-in date
        Date selectedCheckInDate = jdcForCheckInDate.getDate();
        String checkInDate = "";
        if (selectedCheckInDate != null) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Format as "YYYY-MM-DD"
            checkInDate = dateFormat.format(selectedCheckInDate);
        }

        // Validation
        // Validate Customer Name
        if (customerName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Customer Name is required. Please enter a valid name.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldCustomerName.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidCustomerName(customerName)) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Name. It must contain 2-50 alphabetic characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldCustomerName.requestFocus();
            return;
        }

        // Validate Mobile Number
        if (mobileNumber.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mobile Number is required. Please enter a valid mobile number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldMobileNumber.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidMobileNumber(mobileNumber)) {
            JOptionPane.showMessageDialog(this, "Invalid Mobile Number. It must start with '98' and be a 10-digit number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldMobileNumber.requestFocus();
            return;
        }

        // Validate Gender
        if (gender.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Gender is required. Please select Male or Female.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate Nationality
        if (nationality.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nationality is required. Please enter a valid nationality.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldNationalityInCheckIn.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidNationality(nationality)) {
            JOptionPane.showMessageDialog(this, "Invalid Nationality. It must contain 2-30 alphabetic characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldNationalityInCheckIn.requestFocus();
            return;
        }

        // Validate Meal Plan
        if (mealPlan.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Meal Plan is required. Please select either Breakfast only, Full Board or No Meal.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbMealPlanForCheckIn.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidMealPlan(mealPlan)) {
            JOptionPane.showMessageDialog(this, "Invalid Meal Plan. Select either 'Breakfast only', 'Full Board', or 'No Meal'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbMealPlanForCheckIn.requestFocus();
            return;
        }

        // Validate check in preference Type
        if (checkInPreference.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Check In Preferrred Time is required. Please select either Morning, Afternoon or Evening.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!ValidationUtil.isValidCheckInPreference(checkInPreference)) {
            JOptionPane.showMessageDialog(this, "Invalid Check In Preference Time. It must be either Please select either Morning, Afternoon or Evening.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate Room Number
        if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumberCheckIn.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-3 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumberCheckIn.requestFocus();
            return;
        }

        // Validate Check-In Date
        if (selectedCheckInDate == null) {
            JOptionPane.showMessageDialog(this, "Check-In Date is required. Please select a valid date.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            jdcForCheckInDate.requestFocus();
            return;
        }

        // Convert Room Number
        int roomNumber = Integer.parseInt(roomNumberStr);

        // Validate Room Existence and Availability
        RoomModel selectedRoom = null; // Variable to hold the room if it exists
        for (RoomModel room : roomList) {
            if (room.getRoomNumber() == roomNumber) {
                selectedRoom = room;
                break;
            }
        }

        // Check if the room exists
        if (selectedRoom == null) {
            JOptionPane.showMessageDialog(this, "Room Number " + roomNumber + " does not exist. Please enter a valid room number.", "Room Not Found", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumberCheckIn.requestFocus();
            return;
        }

        // Check if the room is available
        if (!"Not-Booked".equalsIgnoreCase(selectedRoom.getStatus())) {
            JOptionPane.showMessageDialog(this, "Room Number " + roomNumber + " is already booked or not available. Please select a different room.", "Room Unavailable", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumberCheckIn.requestFocus();
            return;
        }

        // If all validations pass, save the check-in details
        CustomerModel checkInDetails = new CustomerModel(
                customerName, mobileNumber, gender, nationality, checkInPreference, mealPlan, roomNumber, checkInDate);
        checkInList.add(checkInDetails);
        addCheckInData(checkInDetails);

        // Update the room's status to "Booked"
        updateRoomStatusInTableAndList(roomNumber, "Booked");

        JOptionPane.showMessageDialog(this, "Check-In Successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnCheckInNowActionPerformed

    /**
     * Updates the status of a room in both the `roomList` and the table model.
     *
     * @param roomNumber the room number whose status needs to be updated
     * @param newStatus the new status to set for the room (e.g., "Booked",
     * "Not-Booked")
     */
    private void updateRoomStatusInTableAndList(int roomNumber, String newStatus) {
        // Update the room status in roomList
        for (RoomModel room : roomList) {
            if (room.getRoomNumber() == roomNumber) {
                room.setStatus(newStatus);
                break;
            }
        }

        // Update the room status in the table
        DefaultTableModel tableModel = (DefaultTableModel) tblRoom.getModel();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            // Assuming room number is in column 0
            if ((int) tableModel.getValueAt(i, 0) == roomNumber) {
                tableModel.setValueAt(newStatus, i, 5);
                break;
            }
        }
    }

    /**
     * Switches the panel to show the check-in table view.
     *
     * @param evt The ActionEvent triggered by the button click.
     * @throws No exceptions are thrown in this method.
     */
    private void btnViewTableCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTableCheckInActionPerformed
        pnlFormForCheckIn.setVisible(false);
        pnlViewTableForCheckIn.setVisible(true);
    }//GEN-LAST:event_btnViewTableCheckInActionPerformed

    /**
     * Clears all input fields and resets the check-in form to its default
     * state.
     *
     * @param evt The ActionEvent triggered by the button click.
     * @throws No exceptions are thrown in this method.
     */
    private void btnClearCheckInFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearCheckInFieldsActionPerformed

        // Clear all text fields
        txtFieldCustomerName.setText("");  // Clears the customer name field
        txtFieldMobileNumber.setText("");  // Clears the mobile number field
        txtFieldNationalityInCheckIn.setText("");   // Clears the nationality field
        txtFieldRoomNumberCheckIn.setText("");    // Clears the room number field

        btnGroupGender.clearSelection();
        rbMaleInCheckIn.setSelected(false);          // Optionally deselects the Male radio button
        rbFemaleInCheckIn.setSelected(false);        // Optionally deselects the Female radio button

        // Reset combo box for room type
        cmbRoomType.setSelectedIndex(0);    // Resets the combo box to the default (first) item

        // Reset radio buttons for bed type
        rbMorning.setSelected(false);     // Deselects the Single-bed option
        rbEvening.setSelected(false);     // Deselects the Double-bed option

        // Optionally focus the first input field after clearing
        txtFieldCustomerName.requestFocus(); // Sets focus back to the customer name field
    }//GEN-LAST:event_btnClearCheckInFieldsActionPerformed

    /**
     * Navigates the user back to the home screen
     *
     * @param evt The ActionEvent triggered by the button click.
     * @throws No exceptions are thrown in this method.
     */
    private void btnBackToHomeFromCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToHomeFromCheckInActionPerformed
        // TODO add your handling code here:
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackToHomeFromCheckInActionPerformed

    /**
     * Validates the input room number and deletes the check-in data if the
     * input is valid.
     *
     * @param evt The ActionEvent triggered by the button click.
     */
    private void btnDeleteCheckInDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckInDetailsActionPerformed
        // TODO add your handling code here:

        // Get the room number from the input field
        String roomNumberStr = txtFieldRoomNumberCheckIn.getText().trim();

        // Validate Room Number
        if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumberCheckIn.requestFocus();  // Focus on room number input field
        } else if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-3 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumberCheckIn.requestFocus();  // Focus on room number input field
        } else {
            // Convert the room number to integer type
            int roomNumber = Integer.parseInt(roomNumberStr);

            // Call the method to delete the check-in data from both ArrayList and JTable
            deleteCheckInData(roomNumber);
        }
    }//GEN-LAST:event_btnDeleteCheckInDetailsActionPerformed

    /**
     * Updates the check-in details after validating all input fields.
     *
     * @param evt The ActionEvent triggered by the button click.
     * @return String: "Returns no value (void method)."
     * @return boolean: "This method does not return a boolean value."
     */
    private void btnUpdateCheckInDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCheckInDetailsActionPerformed

        // Retrieve input values
        String customerName = txtFieldCustomerName.getText().trim();
        String mobileNumber = txtFieldMobileNumber.getText().trim();
        String gender = rbMaleInCheckIn.isSelected() ? "Male" : (rbFemaleInCheckIn.isSelected() ? "Female" : "");
        String nationality = txtFieldNationalityInCheckIn.getText().trim();
        String mealPlan = cmbMealPlanForCheckIn.getSelectedItem().toString().trim();
        String checkInPreference = rbMorning.isSelected() ? "Morning" : (rbAfternoon.isSelected() ? "Afternoon" : "Evening");
        String roomNumberStr = txtFieldRoomNumberCheckIn.getText().trim();
        Date selectedCheckInDate = jdcForCheckInDate.getDate();
        String checkInDate = "";
        if (selectedCheckInDate != null) {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Format as "YYYY-MM-DD"
            checkInDate = dateFormat.format(selectedCheckInDate);
        }

        // Validate Customer Name
        if (customerName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Customer Name is required. Please enter a valid name.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldCustomerName.requestFocus();
        } else if (!ValidationUtil.isValidCustomerName(customerName)) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Name. It must contain 2-50 alphabetic characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldCustomerName.requestFocus();
        } // Validate Mobile Number
        else if (mobileNumber.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mobile Number is required. Please enter a valid mobile number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldMobileNumber.requestFocus();
        } else if (!ValidationUtil.isValidMobileNumber(mobileNumber)) {
            JOptionPane.showMessageDialog(this, "Invalid Mobile Number. It must start with '98' and be a 10-digit number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldMobileNumber.requestFocus();
        } // Validate Gender
        else if (gender.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Gender is required. Please select Male or Female.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } // Validate Nationality
        else if (nationality.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nationality is required. Please enter a valid nationality.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldNationalityInCheckIn.requestFocus();
        } else if (!ValidationUtil.isValidNationality(nationality)) {
            JOptionPane.showMessageDialog(this, "Invalid Nationality. It must contain 2-30 alphabetic characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldNationalityInCheckIn.requestFocus();
        } // Validate Room Type
        else if (mealPlan.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Meal Plan is required. Select'Breakfast', 'Full Board' or 'No Meal'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomType.requestFocus();
        } else if (!ValidationUtil.isValidMealPlan(mealPlan)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Type. Select'Breakfast', 'Full Board' or 'No Meal' ", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomType.requestFocus();
        } // Validate Bed Type
        else if (checkInPreference.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Check In Preferrred Time is required. Please select either Morning, Afternoon or Evening.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } else if (!ValidationUtil.isValidCheckInPreference(checkInPreference)) {
            JOptionPane.showMessageDialog(this, "Invalid check in preference Type. Check In Preferrred Time is required. Please select either Morning, Afternoon or Evening.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } // Validate Room Number
        else if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumberCheckIn.requestFocus();
        } else if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-5 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumberCheckIn.requestFocus();
        } // If all validations pass
        else {
            int roomNumber = Integer.parseInt(roomNumberStr);
            updateCheckInData(roomNumber, customerName, mobileNumber, gender, nationality, checkInPreference, mealPlan, checkInDate);

        }
    }//GEN-LAST:event_btnUpdateCheckInDetailsActionPerformed

    /**
     * Switches the panel to display the check-in form view.
     *
     * @param evt The ActionEvent triggered by the button click.
     * @return String: Returns no value (void method).
     * @return boolean: Does not return a boolean value."
     * @throws No exceptions are thrown in this method.
     */
    private void btnSwitchPanel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwitchPanel1ActionPerformed
        // TODO add your handling code here:
        pnlFormForCheckIn.setVisible(true);
        pnlViewTableForCheckIn.setVisible(false);
    }//GEN-LAST:event_btnSwitchPanel1ActionPerformed

    /**
     * Switches the tab to the check-in section when the label is clicked.
     *
     * @param evt The MouseEvent triggered by the label click.
     * @throws No exceptions are thrown in this method.
     */
    private void lblCheckInButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCheckInButtonMouseClicked
        // TODO add your handling code here:
        tbPaneMain.setSelectedIndex(1);
    }//GEN-LAST:event_lblCheckInButtonMouseClicked

    /**
     * Switches the tab to the manage room section when the label is clicked.
     *
     * @param evt The MouseEvent triggered by the label click.
     * @throws No exceptions are thrown in this method.
     */
    private void lblManageRoomButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblManageRoomButtonMouseClicked
        // TODO add your handling code here:
        tbPaneMain.setSelectedIndex(0);
    }//GEN-LAST:event_lblManageRoomButtonMouseClicked

    private void btnCheckOutNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutNowActionPerformed
        // TODO add your handling code here:
        // Retrieve input values

        //        String roomNumberStr = txtFieldRoomNumber.getText().trim();
        //        String customerName = txtFieldCustomerName.getText().trim();
        //        String mobileNumber = txtFieldMobileNumber.getText().trim();
        //        String pricePerDayStr = txtFieldPricePerDay.getText().trim();
        //        String totalAmountStr = txtFieldTotalAmount.getText().trim();
        //        Date selectedCheckInDate = jdcForCheckInDate.getDate();
        //        Date selectedCheckOutDate = jdcForCheckOutDate.getDate();
        //
        //        String checkInDate = "";
        //        String checkOutDate = "";
        //
        //        if (selectedCheckInDate != null) {
        //            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        //            checkInDate = dateFormat.format(selectedCheckInDate);
        //        }
        //        if (selectedCheckOutDate != null) {
        //            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        //            checkOutDate = dateFormat.format(selectedCheckOutDate);
        //        }
        //
        //        // Validate Room Number
        //        if (roomNumberStr.isEmpty()) {
        //            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldRoomNumber.requestFocus();
        //            return;
        //        }
        //        if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
        //            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-5 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldRoomNumber.requestFocus();
        //            return;
        //        }
        //
        //        // Validate Customer Name
        //        if (customerName.isEmpty()) {
        //            JOptionPane.showMessageDialog(this, "Customer Name is required. Please enter a valid name.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldCustomerName.requestFocus();
        //            return;
        //        }
        //        if (!ValidationUtil.isValidCustomerName(customerName)) {
        //            JOptionPane.showMessageDialog(this, "Invalid Customer Name. It must contain 2-50 alphabetic characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldCustomerName.requestFocus();
        //            return;
        //        }
        //
        //        // Validate Mobile Number
        //        if (mobileNumber.isEmpty()) {
        //            JOptionPane.showMessageDialog(this, "Mobile Number is required. Please enter a valid mobile number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldMobileNumber.requestFocus();
        //            return;
        //        }
        //        if (!ValidationUtil.isValidMobileNumber(mobileNumber)) {
        //            JOptionPane.showMessageDialog(this, "Invalid Mobile Number. It must be a 10-digit number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldMobileNumber.requestFocus();
        //            return;
        //        }
        //
        //        // Validate Price Per Day
        //        if (pricePerDayStr.isEmpty()) {
        //            JOptionPane.showMessageDialog(this, "Price Per Day is required. Please enter a valid amount.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldPricePerDay.requestFocus();
        //            return;
        //        }
        //        if (!ValidationUtil.isValidPrice(pricePerDayStr)) {
        //            JOptionPane.showMessageDialog(this, "Invalid Price Per Day. It must be a positive number with optional decimal points (up to 2 decimal places).", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldPricePerDay.requestFocus();
        //            return;
        //        }
        //
        //        // Validate Total Amount
        //        if (totalAmountStr.isEmpty()) {
        //            JOptionPane.showMessageDialog(this, "Total Amount is required. Please enter a valid amount.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldTotalAmount.requestFocus();
        //            return;
        //        }
        //        if (!ValidationUtil.isValidPrice(totalAmountStr)) {
        //            JOptionPane.showMessageDialog(this, "Invalid Total Amount. It must be a positive number with optional decimal points (up to 2 decimal places).", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldTotalAmount.requestFocus();
        //            return;
        //        }
        //
        //        // Validate Check-In Date
        //        if (checkInDate.isEmpty()) {
        //            JOptionPane.showMessageDialog(this, "Check-In Date is required. Please select a valid date.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            jdcForCheckInDate.requestFocus();
        //            return;
        //        }
        //
        //        // Validate Check-Out Date
        //        if (checkOutDate.isEmpty()) {
        //            JOptionPane.showMessageDialog(this, "Check-Out Date is required. Please select a valid date.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            jdcForCheckOutDate.requestFocus();
        //            return;
        //        }
        //        if (selectedCheckOutDate.before(selectedCheckInDate)) {
        //            JOptionPane.showMessageDialog(this, "Check-Out Date cannot be earlier than Check-In Date.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            jdcForCheckOutDate.requestFocus();
        //            return;
        //        }
        //
        //        // Convert Room Number, Price Per Day, and Total Amount
        //        int roomNumber = Integer.parseInt(roomNumberStr);
        //        double pricePerDay = Double.parseDouble(pricePerDayStr);
        //        double totalAmount = Double.parseDouble(totalAmountStr);
        //
        //        // Check if room number exists in the system
        //        boolean roomExists = false;
        ////        for (RoomModel room : roomList) {
        ////            if (room.getRoomNumber() == roomNumber) {
        ////                roomExists = true;
        ////                break;
        ////            }
        //        }
        //        if (!roomExists) {
        //            JOptionPane.showMessageDialog(this, "Room Number " + roomNumber + " does not exist. Please check the Room Number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        //            txtFieldRoomNumber.requestFocus();
        //            return;
        //        }
        //
        //        // Proceed with check-out process
        //        JOptionPane.showMessageDialog(this, "Check-Out Successful!" + checkOutDate, "Success", JOptionPane.INFORMATION_MESSAGE);
        // Remove the room from the "Booked" status
    }//GEN-LAST:event_btnCheckOutNowActionPerformed

    /**
     * Displays the table panel for checkout details and hides the checkout form
     * panel.
     *
     * @param evt The ActionEvent triggered by the button click.
     * @return String: Returns no value (void method).
     * @return boolean: Does not return a boolean
     * @throws No exceptions are thrown in this method.
     */
    private void btnViewTableForCheckOutDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTableForCheckOutDetailsActionPerformed
        // TODO add your handling code here:
        pnlTableForCheckOut.setVisible(true);
        pnlFormForCheckOutForm.setVisible(false);
    }//GEN-LAST:event_btnViewTableForCheckOutDetailsActionPerformed

    /**
     * Navigates back to the home page by creating a new home page instance and
     * disposing of the current window.
     *
     * @param evt The ActionEvent triggered by the button click.
     * @return String: Returns no value (void method).
     * @return boolean: Does not return a boolean
     * @throws No exceptions are thrown in this method.
     */
    private void btnBackToHomePage1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToHomePage1ActionPerformed
        // TODO add your handling code here:
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackToHomePage1ActionPerformed

    /**
     * Switches the panel from the checkout table view to the checkout form
     * view.
     *
     * @param evt The ActionEvent triggered by the button click.
     * @return String: Returns no value (void method).
     * @return boolean: Does not return a boolean
     * @throws No exceptions are thrown in this method.
     */
    private void switchPanelFromCheckOutTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchPanelFromCheckOutTableActionPerformed
        // TODO add your handling code here:
        pnlFormForCheckOutForm.setVisible(true);
        pnlTableForCheckOut.setVisible(false);
    }//GEN-LAST:event_switchPanelFromCheckOutTableActionPerformed

    /**
     * Switches the tab to the checkout section when the label is clicked.
     *
     * @param evt The MouseEvent triggered by the label click.
     * @throws No exceptions are thrown in this method.
     */
    private void lblCheckOutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCheckOutButtonMouseClicked
        // TODO add your handling code here:
        tbPaneMain.setSelectedIndex(2);
    }//GEN-LAST:event_lblCheckOutButtonMouseClicked

    /**
     * Switches the tab to the dashboard section when the label is clicked.
     *
     * @param evt The MouseEvent triggered by the label click.
     * @throws No exceptions are thrown in this method.
     */
    private void lblDashBoardButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDashBoardButtonMouseClicked
        // TODO add your handling code here:
        tbPaneMain.setSelectedIndex(3);
        updateDashboard();
    }//GEN-LAST:event_lblDashBoardButtonMouseClicked

    /**
     * Logs out the user by confirming their choice and navigating to the login
     * page if confirmed.
     *
     * @param evt The MouseEvent triggered by the label click.
     * @throws No exceptions are thrown in this method.
     */
    private void lblLogOutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogOutButtonMouseClicked
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to log out?",
                "Confirm Logout",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        // Handle the user's response
        if (response == JOptionPane.YES_OPTION) {
            this.setVisible(false);
            new LoginPage().setVisible(true);
        } else {
            // If the user selects "No," do nothing
            System.out.println("Logout canceled by user.");
        }
    }//GEN-LAST:event_lblLogOutButtonMouseClicked

    /**
     * Exits the application after confirming the user's choice when the label
     * is clicked
     *
     * @param evt The MouseEvent triggered by the label click.
     * @throws No exceptions are thrown in this method.
     */
    private void lblExitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblExitButtonMouseClicked
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to exit?",
                "Exit Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (response == JOptionPane.YES_OPTION) {
            // Close the application
            System.exit(0);
        } else {
            // Log or handle if the user chooses not to exit
            System.out.println("User canceled the exit operation.");
        }
    }//GEN-LAST:event_lblExitButtonMouseClicked

    /**
     * Toggles the sorting order between ascending and descending for rooms and
     * updates the room list table accordingly.
     */
    private void btnAscendingOrDescendingInRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAscendingOrDescendingInRoomActionPerformed
        // TODO add your handling code here:
        if (isAscending) {
            btnAscendingOrDescendingInRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/AscendingLogo.png")));
            isAscending = false;
            if (cmbSortInRoom.getSelectedIndex() == 0) {
                sortedRoomList = mergeSort.sortByRoomNumber(roomList, isAscending);

            } else if (cmbSortInRoom.getSelectedIndex() == 1) {
                sortedRoomList = selectionSort.sortByRoomPrice(roomList, isAscending);
            }
            loadRoomListToTable(sortedRoomList);
        } else {
            btnAscendingOrDescendingInRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/DescendingLogo.png"))); // NOI18N
            isAscending = true;
            if (cmbSortInRoom.getSelectedIndex() == 0) {
                sortedRoomList = mergeSort.sortByRoomNumber(roomList, isAscending);

            } else if (cmbSortInRoom.getSelectedIndex() == 1) {
                sortedRoomList = selectionSort.sortByRoomPrice(roomList, isAscending);
            }
            loadRoomListToTable(sortedRoomList);
        }
    }//GEN-LAST:event_btnAscendingOrDescendingInRoomActionPerformed

    /**
     * Sorts the room list based on the selected criteria (Room Number or Room
     * Price) and displays the sorted list in the room table.
     */
    private void cmbSortInRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSortInRoomActionPerformed
        // TODO add your handling code here:
        if (cmbSortInRoom.getSelectedIndex() == 0) {
            sortedRoomList = mergeSort.sortByRoomNumber(roomList, isAscending);
        } else if (cmbSortInRoom.getSelectedIndex() == 1) {
            sortedRoomList = selectionSort.sortByRoomPrice(roomList, isAscending);
        }
        loadRoomListToTable(sortedRoomList);
    }//GEN-LAST:event_cmbSortInRoomActionPerformed

    /**
     * Toggles the sorting order between ascending and descending for customers
     * and updates the customer list table accordingly.
     */
    private void btnAscendingOrDescendingInCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAscendingOrDescendingInCustomerActionPerformed
        // TODO add your handling code here:
        if (isAscending) {
            btnAscendingOrDescendingInCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/AscendingLogo.png")));
            isAscending = false;
            if (cmbSortInCustomer.getSelectedIndex() == 0) {
                sortedCheckInList = insertionSort.sortByCustomerName(checkInList, isAscending);

                loadCustomerListToTable(sortedCheckInList);
            }

        } else {
            btnAscendingOrDescendingInCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/DescendingLogo.png"))); // NOI18N
            isAscending = true;
            if (cmbSortInCustomer.getSelectedIndex() == 0) {
                sortedCheckInList = insertionSort.sortByCustomerName(sortedCheckInList, isAscending);
            }
        }
        loadCustomerListToTable(sortedCheckInList);
    }//GEN-LAST:event_btnAscendingOrDescendingInCustomerActionPerformed
    /**
     * Sorts the customer list by name based on the selected criteria and
     * displays the sorted list in the customer table.
     */
    private void cmbSortInCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSortInCustomerActionPerformed
        // TODO add your handling code here:
        if (cmbSortInRoom.getSelectedIndex() == 0) {
            sortedCheckInList = insertionSort.sortByCustomerName(checkInList, isAscending);
        }
        loadCustomerListToTable(sortedCheckInList);

    }//GEN-LAST:event_cmbSortInCustomerActionPerformed

    /**
     * Searches for a customer by name in the customer check-in list and
     * displays the search result in the customer table. If the customer is not
     * found, an appropriate message is displayed.
     *
     * @param evt the action event triggered when the search button is clicked
     */
    private void btnSearchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCustomerActionPerformed
        // TODO add your handling code here:
        // Get and trim the text from the search field
        String searchText = txtFieldForCustomerSearch.getText().trim();

        // Show an error if the search field is empty
        if (searchText.isEmpty()) {
            JOptionPane.showMessageDialog(
                    this,
                    "Cannot search on empty fields. Please enter the data you want to search.",
                    "Unable to Search",
                    JOptionPane.ERROR_MESSAGE
            );
            return; // Stop execution
        } else if (!ValidationUtil.isValidCustomerName(searchText)) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Name. It must contain 2-50 alphabetic characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldCustomerName.requestFocus();
        }

        // Sort the list before performing binary search
        sortedCheckInList = insertionSort.sortByCustomerName(checkInList, isAscending);

        // Perform binary search to find the customer
        CustomerModel searchResult = binarySearch.searchByName(searchText, sortedCheckInList, 0, sortedCheckInList.size() - 1);

        // Check if the search result is null (customer not found)
        if (searchResult == null) {
            JOptionPane.showMessageDialog(this, "Customer not found!", "Search Result", JOptionPane.INFORMATION_MESSAGE);
            return; // Stop execution
        }

        // Access the table model
        DefaultTableModel model = (DefaultTableModel) tblCustomerCheckIn.getModel();

        // Step 1: Clear all rows from the table
        model.setRowCount(0); // Removes all rows from the table

        // Step 2: Add the searched customer to the top of the table
        model.addRow(new Object[]{
            searchResult.getCustomerName(),
            searchResult.getMobileNumber(),
            searchResult.getGender(),
            searchResult.getNationality(),
            searchResult.getMealPlan(),
            searchResult.getCheckInPreference(),
            searchResult.getRoomNumber(),
            searchResult.getCheckInDate(),});

        // Step 3: Highlight the new row
        tblCustomerCheckIn.setRowSelectionInterval(0, 0); // Select the first row
    }//GEN-LAST:event_btnSearchCustomerActionPerformed
    /**
     * Handles the action event when the "View All Data for Check-In" button is
     * clicked. Restores all customer check-in data to the table by calling the
     * restoreAllDataToTable method.
     *
     * @param evt the ActionEvent object containing details about the button
     */
    private void btnViewAllDataForCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllDataForCheckInActionPerformed
        // TODO add your handling code here:
        restoreAllDataToTable();

    }//GEN-LAST:event_btnViewAllDataForCheckInActionPerformed
    /**
     * Clears the placeholder text in the search field when it gains focus.
     *
     * @param evt the focus event triggered when the search field gains focus
     */
    private void txtFieldForCustomerSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldForCustomerSearchFocusGained
        // TODO add your handling code here:
        if (txtFieldForCustomerSearch.getText().equals("Search any customer name")) {
            txtFieldForCustomerSearch.setForeground(Color.BLACK);
            txtFieldForCustomerSearch.setText("");

        }
    }//GEN-LAST:event_txtFieldForCustomerSearchFocusGained
    /**
     * Resets the search field to its default placeholder text and color when
     * the Enter key is pressed.
     *
     * @param evt the focus event triggered when the search field loses focus
     */
    private void txtFieldForCustomerSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldForCustomerSearchFocusLost
        // TODO add your handling code here:
        if (txtFieldForCustomerSearch.getText().equals("")) {
            txtFieldForCustomerSearch.setForeground(new java.awt.Color(204, 204, 204));
            txtFieldForCustomerSearch.setText("Search any customer name");

        }

    }//GEN-LAST:event_txtFieldForCustomerSearchFocusLost
    /**
     * Restores all customer check-in data to the table by clearing the table
     * and re-adding all rows from the original check-in list.
     */
    private void restoreAllDataToTable() {
        // Access the table model
        DefaultTableModel model = (DefaultTableModel) tblCustomerCheckIn.getModel();

        // Clear the table
        model.setRowCount(0);

        // Add all rows from the original checkInList
        for (CustomerModel customer : checkInList) {
            model.addRow(new Object[]{
                customer.getCustomerName(),
                customer.getMobileNumber(),
                customer.getGender(),
                customer.getNationality(),
                customer.getMealPlan(),
                customer.getCheckInPreference(),
                customer.getRoomNumber(),
                customer.getCheckInDate(),});
        }
    }

    /**
     * Adds initial room information to the room list for demonstration
     * purposes.
     */
    public void addInitialRoomInformation() {
        RoomModel room1 = new RoomModel(103, "AC", "Family Suite", "Double-Bed", 12000, "Booked");
        roomList.add(room1);

        RoomModel room2 = new RoomModel(101, "Non-AC", "Standard", "Single-Bed", 5000, "Booked");
        roomList.add(room2);

        RoomModel room3 = new RoomModel(102, "Non-AC", "Deluxe", "Double-Bed", 10000, "Not-Booked");
        roomList.add(room3);

        RoomModel room4 = new RoomModel(105, "AC", "Presidential Suite", "Single-Bed", 30000, "Not-Booked");
        roomList.add(room4);

        RoomModel room5 = new RoomModel(104, "AC", "Standard", "Double-Bed", 14000, "Not-Booked");
        roomList.add(room5);

        RoomModel room6 = new RoomModel(108, "Non-AC", "Deluxe", "Double-Bed", 11000, "Not-Booked");
        roomList.add(room6);

        RoomModel room7 = new RoomModel(106, "AC", "Family Suite", "Double-Bed", 12500, "Booked");
        roomList.add(room7);

        RoomModel room8 = new RoomModel(110, "AC", "Standard", "Double-Bed", 13500, "Not-Booked");
        roomList.add(room8);

        RoomModel room9 = new RoomModel(109, "AC", "Presidential Suite", "Single-Bed", 29000, "Booked");
        roomList.add(room9);

        RoomModel room10 = new RoomModel(107, "Non-AC", "Standard", "Single-Bed", 4800, "Not-Booked");
        roomList.add(room10);
    }

    /**
     * Adds room data to both the room list and the JTable.
     *
     * This method accepts a RoomModel object, adds it to the roomList
     * ArrayList, and updates the JTable by adding a new row with the room
     * details (room number, type, grade, bed type, price, and status).
     *
     * @param room The RoomModel object containing the room details to be added.
     */
    private void addRoomData(RoomModel room) {
        roomList.add(room); // Add room to the list
        DefaultTableModel model = (DefaultTableModel) tblRoom.getModel(); // Get the table model
        model.addRow(new Object[]{
            room.getRoomNumber(), room.getRoomType(), room.getRoomGrade(), room.getBedType(), room.getPrice(), room.getStatus()
        }); // Add the student details as a new row
    }

    /**
     * Updates the room data in the ArrayList and JTable.
     *
     * @param roomNumber the room number to identify the room for update
     * @param roomType the new room type (AC/Non-AC)
     * @param roomGrade the new room grade (Standard, Deluxe, etc.)
     * @param bedType the new bed type (Single-bed, Double-bed)
     * @param price the new room price
     * @param status the new room status (Booked/Not-Booked)
     */
    private void updateRoomData(int roomNumber, String roomType, String roomGrade, String bedType, double price, String status) {
        boolean roomFound = false;

        // Update the room data in the ArrayList
        for (int i = 0; i < roomList.size(); i++) {
            RoomModel room = roomList.get(i);

            if (room.getRoomNumber() == roomNumber) {
                roomFound = true;

                // Update the room details in the ArrayList
                room.setRoomType(roomType);
                room.setRoomGrade(roomGrade);
                room.setBedType(bedType);
                room.setPrice(price);
                room.setStatus(status);

                // Ensure JTable has enough rows
                DefaultTableModel model = (DefaultTableModel) tblRoom.getModel();
                if (model.getRowCount() <= i) {
                    model.setRowCount(i + 1); // Add rows as needed
                }

                // Update the corresponding row in the JTable
                tblRoom.setValueAt(roomType, i, 1);  // Room Type column
                tblRoom.setValueAt(roomGrade, i, 2);  // Room Grade column
                tblRoom.setValueAt(bedType, i, 3);    // Bed Type column
                tblRoom.setValueAt(price, i, 4);      // Price column
                tblRoom.setValueAt(status, i, 5);     // Status column

                // Show success message
                JOptionPane.showMessageDialog(this, "Room details updated successfully!", "Update Success", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }

        // If room number was not found
        if (!roomFound) {
            JOptionPane.showMessageDialog(this, "Room with number " + roomNumber + " not found.", "Update Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Deletes a room from the ArrayList and updates the JTable.
     *
     * @param roomNumber the room number to identify the room for deletion
     */
    public void deleteRoomData(int roomNumber) {
        boolean isRoomFound = false; // Flag to track if the room was found

        // Iterate through the room list to find the room
        for (int i = 0; i < roomList.size(); i++) {
            RoomModel room = roomList.get(i);

            if (room.getRoomNumber() == roomNumber) {
                isRoomFound = true;

                // Show confirmation dialog before deleting
                int response = JOptionPane.showConfirmDialog(
                        this,
                        "Are you sure you want to delete the room details for room number " + roomNumber + "?",
                        "Confirm Deletion",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE
                );

                if (response == JOptionPane.YES_OPTION) {
                    // Remove the room from the ArrayList
                    roomList.remove(i);

                    // Validate index and remove the row from JTable
                    DefaultTableModel model = (DefaultTableModel) tblRoom.getModel();
                    if (i < model.getRowCount()) {
                        model.removeRow(i);
                    }

                    // Show success message after deletion
                    JOptionPane.showMessageDialog(
                            this,
                            "Room details deleted successfully!",
                            "Delete Success",
                            JOptionPane.INFORMATION_MESSAGE
                    );

                    return; // Exit after successful deletion
                } else {
                    // Log the cancellation
                    System.out.println("Deletion canceled by user.");
                    return; // Exit after user cancels
                }
            }
        }

        // If no matching room is found
        JOptionPane.showMessageDialog(
                this,
                "Room with number " + roomNumber + " does not exist or has already been deleted.",
                "Delete Error",
                JOptionPane.ERROR_MESSAGE
        );
    }

    /**
     * Loads the list of rooms into the room table by populating it with room
     * data.
     *
     * @param roomList A list of RoomModel objects to be displayed in the table.
     */
    private void loadRoomListToTable(List<RoomModel> roomList) {
        DefaultTableModel model = (DefaultTableModel) tblRoom.getModel();  // Get the table model
        model.setRowCount(0);  // Clear existing rows

        // Populate the table with room data
        for (RoomModel room : roomList) {
            model.addRow(new Object[]{
                room.getRoomNumber(), room.getRoomType(), room.getRoomGrade(), room.getBedType(),
                room.getPrice(), room.getStatus()
            });
        }
    }

    /**
     * Adds initial check-in information to the customer list for demonstration
     * purposes.
     *
     */
    public void addInitialCheckInInformation() {
        CustomerModel customer1 = new CustomerModel("John Cena", "9843253088", "Male", "American",
                "Double-Bed", "AC", 101, "2025-01-01");
        checkInList.add(customer1);

        CustomerModel customer2 = new CustomerModel("Randy Orton", "9876543210", "Male", "British",
                "Single-Bed", "Non-AC", 103, "2025-01-02");
        checkInList.add(customer2);

        CustomerModel customer3 = new CustomerModel("Elektra Vortex", "9871236540", "Female", "Canadian",
                "Double-Bed", "AC", 109, "2025-01-03");
        checkInList.add(customer3);

        CustomerModel customer4 = new CustomerModel("Orion Nebula", "9862874152", "Male", "Greek",
                "Double-Bed", "Standard", 106, "2025-01-07");
        checkInList.add(customer4);

        CustomerModel customer5 = new CustomerModel("Connor Mcgreggor", "9841442602", "Male", "Irish",
                "Double-Bed", "Standard", 106, "2025-01-07");
        checkInList.add(customer5);
    }

    private void loadCustomerListToTable(List<CustomerModel> customerList) {
        DefaultTableModel model = (DefaultTableModel) tblCustomerCheckIn.getModel();  // Get the table model
        model.setRowCount(0);  // Clear existing rows

        // Populate the table with customer data
        for (CustomerModel customer : customerList) {
            model.addRow(new Object[]{
                customer.getCustomerName(), customer.getMobileNumber(), customer.getGender(),
                customer.getNationality(), customer.getCheckInPreference(), customer.getMealPlan(),
                customer.getRoomNumber(), customer.getCheckInDate()
            });
        }
    }

    /**
     * Adds the given customer check-in data to the JTable and the check-in
     * list.
     *
     * This method takes a `CustomerCheckInModel` object, adds it to the
     * internal list that holds the check-in data (`checkInList`), and then
     * updates the JTable to reflect this new data. The JTable is updated by
     * adding a new row with the customer's check-in details.
     *
     * @param checkInDetails The `CustomerModel` object containing the details
     * of the customer who is checking in.
     */
    private void addCheckInData(CustomerModel checkInDetails) {
        checkInList.add(checkInDetails); // Add room to the list
        DefaultTableModel model = (DefaultTableModel) tblCustomerCheckIn.getModel(); // Get the table model
        model.addRow(new Object[]{
            checkInDetails.getCustomerName(), checkInDetails.getMobileNumber(), checkInDetails.getGender(), checkInDetails.getNationality(), checkInDetails.getCheckInPreference(), checkInDetails.getMealPlan(),
            checkInDetails.getRoomNumber(), checkInDetails.getCheckInDate()

        }); // Add the checkIn details as a new row
    }

    /**
     * Handles the update of customer check-in details.
     *
     * This method updates the check-in details for a customer with the provided
     * room number. It updates the relevant fields in both the ArrayList and the
     * JTable.
     *
     * @param roomNumber The room number of the customer whose check-in details
     * need to be updated.
     * @param customerName The new customer name.
     * @param mobileNumber The new mobile number.
     * @param gender The new gender.
     * @param nationality The new nationality.
     * @param bedType The new bed type.
     * @param roomType The new room type.
     * @param checkInDate The new check-in date.
     */
    private void updateCheckInData(int roomNumber, String customerName, String mobileNumber, String gender, String nationality, String bedType, String roomType, String checkInDate) {
        // Update the check-in data in the ArrayList
        for (int i = 0; i < checkInList.size(); i++) {
            CustomerModel checkIn = checkInList.get(i);
            if (checkIn.getRoomNumber() == roomNumber) {
                // Update the check-in details in the ArrayList
                checkIn.setCustomerName(customerName);
                checkIn.setMobileNumber(mobileNumber);
                checkIn.setGender(gender);
                checkIn.setNationality(nationality);
                checkIn.setBedType(bedType);
                checkIn.setRoomType(roomType);
                checkIn.setCheckInDate(checkInDate);

                // Also update the corresponding row in the JTable
                tblCustomerCheckIn.setValueAt(customerName, i, 0);   // Customer Name column
                tblCustomerCheckIn.setValueAt(mobileNumber, i, 1);   // Mobile Number column
                tblCustomerCheckIn.setValueAt(gender, i, 2);         // Gender column
                tblCustomerCheckIn.setValueAt(nationality, i, 3);    // Nationality column
                tblCustomerCheckIn.setValueAt(bedType, i, 4);        // Bed Type column
                tblCustomerCheckIn.setValueAt(roomType, i, 5);       // Room Type column
                tblCustomerCheckIn.setValueAt(roomNumber, i, 6);     // Room Number column
                tblCustomerCheckIn.setValueAt(checkInDate, i, 7);    // Check-in Date column

                // Show success message
                JOptionPane.showMessageDialog(this, "Customer check-in details updated successfully!", "Update Success", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }

        // If room number was not found
        JOptionPane.showMessageDialog(this, "Room with number " + roomNumber + " not found.", "Update Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Deletes customer check-in details based on the room number.
     *
     * This method removes the check-in details from the ArrayList and updates
     * the JTable. If the room number is not found, an error message is shown.
     *
     * @param roomNumber The room number of the customer whose check-in details
     * need to be deleted.
     */
    public void deleteCheckInData(int roomNumber) {
        boolean isRoomFound = false; // Flag to check if the room was found

        // Loop through the check-in list to find the customer with the given roomNumber
        for (int i = 0; i < checkInList.size(); i++) {
            CustomerModel checkIn = checkInList.get(i);

            // Check if the room number matches
            if (checkIn.getRoomNumber() == roomNumber) {
                isRoomFound = true; // Room number found

                // Show confirmation dialog before deleting
                int response = JOptionPane.showConfirmDialog(
                        this,
                        "Are you sure you want to delete the check-in details for room number " + roomNumber + "?",
                        "Confirm Deletion",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE
                );

                if (response == JOptionPane.YES_OPTION) {
                    // Remove the customer check-in details from the ArrayList
                    checkInList.remove(i);
                    updateRoomStatusInTableAndList(roomNumber, "Not-Booked");

                    // Validate index and remove the row from JTable
                    DefaultTableModel model = (DefaultTableModel) tblCustomerCheckIn.getModel();
                    if (i < model.getRowCount()) {
                        model.removeRow(i);
                    }

                    // Show success message after deleting
                    JOptionPane.showMessageDialog(
                            this,
                            "Customer check-in details deleted successfully!",
                            "Delete Success",
                            JOptionPane.INFORMATION_MESSAGE
                    );

                    return; // Exit the method after successful deletion
                } else {
                    // If the user cancels, log the action and exit
                    System.out.println("Deletion canceled by user.");
                    return;
                }
            }
        }

        // If the room number was not found
        if (!isRoomFound) {
            JOptionPane.showMessageDialog(
                    this,
                    "Customer check-in with room number " + roomNumber + " not found or has already been deleted.",
                    "Delete Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    /**
     * Updates the dashboard statistics, including total rooms, total check-ins,
     * total revenue, and available rooms, based on the current room and
     * check-in data.
     */
    private void updateDashboard() {
        // Calculate total rooms
        int totalRooms = roomList.size();

        // Calculate total check-ins
        int totalCheckIns = checkInList.size();

        // Calculate revenue (sum of room prices for booked rooms)
        double totalRevenue = 0.0;
        for (RoomModel room : roomList) {
            if ("Booked".equalsIgnoreCase(room.getStatus())) {
                totalRevenue += room.getPrice();
            }
        }
        //Calculate the total number of available-rooms (Status: Not-booked)
        int availableRooms = 0;
        for (RoomModel room : roomList) {
            if ("Not-Booked".equalsIgnoreCase(room.getStatus())) {
                availableRooms++;
            }
        }

        // Update the labels on the dashboard
        lblForTotalRoomsData.setText(String.valueOf(totalRooms));
        lblTotalCheckInData.setText(String.valueOf(totalCheckIns));
        lblTotalCustomersData.setText(String.valueOf(availableRooms));
        lblTotalRevenueData.setText("Rs " + totalRevenue);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRoomDetails1;
    private javax.swing.JButton btnAddRoomDetails2;
    private javax.swing.JButton btnAscendingOrDescendingInCustomer;
    private javax.swing.JButton btnAscendingOrDescendingInRoom;
    private javax.swing.JButton btnBackToHomeFromCheckIn;
    private javax.swing.JButton btnBackToHomePage;
    private javax.swing.JButton btnBackToHomePage1;
    private javax.swing.JButton btnCheckInNow;
    private javax.swing.JButton btnCheckOutNow;
    private javax.swing.JButton btnClear1;
    private javax.swing.JButton btnClearCheckInFields;
    private javax.swing.JButton btnClearRoomFields;
    private javax.swing.JButton btnDeleteCheckInDetails;
    private javax.swing.JButton btnDeleteRoomDetails;
    private javax.swing.ButtonGroup btnGroupBedType;
    private javax.swing.ButtonGroup btnGroupCheckInPreference;
    private javax.swing.ButtonGroup btnGroupGender;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchCustomer;
    private javax.swing.JButton btnSwitchPanel;
    private javax.swing.JButton btnSwitchPanel1;
    private javax.swing.JButton btnUpdateCheckInDetails;
    private javax.swing.JButton btnUpdateRoomDetails;
    private javax.swing.JButton btnViewAllDataForCheckIn;
    private javax.swing.JButton btnViewTable;
    private javax.swing.JButton btnViewTableCheckIn;
    private javax.swing.JButton btnViewTableForCheckOutDetails;
    private javax.swing.JComboBox<String> cmbMealPlanForCheckIn;
    private javax.swing.JComboBox<String> cmbRoomGrade;
    private javax.swing.JComboBox<String> cmbRoomType;
    private javax.swing.JComboBox<String> cmbSortInCustomer;
    private javax.swing.JComboBox<String> cmbSortInRoom;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private com.toedter.calendar.JDateChooser jdcForCheckInDate;
    private com.toedter.calendar.JDateChooser jdcForCheckInDate1;
    private com.toedter.calendar.JDateChooser jdcForCheckOutDate;
    private javax.swing.JLabel lblBedType;
    private javax.swing.JLabel lblBillButton;
    private javax.swing.JLabel lblCheckInButton;
    private javax.swing.JLabel lblCheckInDate;
    private javax.swing.JLabel lblCheckInDate1;
    private javax.swing.JLabel lblCheckInPreference;
    private javax.swing.JLabel lblCheckOutButton;
    private javax.swing.JLabel lblCheckOutDate;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblCustomerName1;
    private javax.swing.JLabel lblDashBoardButton;
    private javax.swing.JLabel lblExitButton;
    private javax.swing.JLabel lblForTotalRoomsData;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLogOutButton;
    private javax.swing.JLabel lblManageCheckInBackGround;
    private javax.swing.JLabel lblManageCheckOutBackground;
    private javax.swing.JLabel lblManageRoomButton;
    private javax.swing.JLabel lblManageRoomsBackground;
    private javax.swing.JLabel lblMealPlanForCheckIn;
    private javax.swing.JLabel lblMobileNumber;
    private javax.swing.JLabel lblMobileNumber1;
    private javax.swing.JLabel lblNationality;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblPricePerDay;
    private javax.swing.JLabel lblRoomGrade;
    private javax.swing.JLabel lblRoomNumber;
    private javax.swing.JLabel lblRoomNumber1;
    private javax.swing.JLabel lblRoomNumber2;
    private javax.swing.JLabel lblRoomType;
    private javax.swing.JLabel lblSortBy;
    private javax.swing.JLabel lblSortBy1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitleAdminDashBoard;
    private javax.swing.JLabel lblTotalAmount;
    private javax.swing.JLabel lblTotalCheckInData;
    private javax.swing.JLabel lblTotalCheckInTitleAndIcon;
    private javax.swing.JLabel lblTotalCustomerTitleAndIcon;
    private javax.swing.JLabel lblTotalCustomersData;
    private javax.swing.JLabel lblTotalRevenueData;
    private javax.swing.JLabel lblTotalRevenueTitleAndIcon;
    private javax.swing.JLabel lblTotalRoomsTitleAndIcon;
    private javax.swing.JPanel pnlBodyMainForCheckIn;
    private javax.swing.JPanel pnlForCustomerCheckIn;
    private javax.swing.JPanel pnlForCustomerCheckOut;
    private javax.swing.JPanel pnlForDashBoard;
    private javax.swing.JPanel pnlForManageRooms;
    private javax.swing.JPanel pnlForTotalCheckIns;
    private javax.swing.JPanel pnlForTotalCustomers;
    private javax.swing.JPanel pnlForTotalRevenue;
    private javax.swing.JPanel pnlForTotalRooms;
    private javax.swing.JPanel pnlFormForCheckIn;
    private javax.swing.JPanel pnlFormForCheckOutForm;
    private javax.swing.JPanel pnlFormForManageRooms;
    private javax.swing.JPanel pnlMainBodyForCustomerCheckOut;
    private javax.swing.JPanel pnlMainBodyForManageRooms;
    private javax.swing.JPanel pnlMainForAdmin;
    private javax.swing.JPanel pnlNavBar;
    private javax.swing.JPanel pnlTableForCheckOut;
    private javax.swing.JPanel pnlViewTableForCheckIn;
    private javax.swing.JPanel pnlViewTableForRooms;
    private javax.swing.JRadioButton rbAfternoon;
    private javax.swing.JRadioButton rbDoubleBed;
    private javax.swing.JRadioButton rbEvening;
    private javax.swing.JRadioButton rbFemaleInCheckIn;
    private javax.swing.JRadioButton rbMaleInCheckIn;
    private javax.swing.JRadioButton rbMorning;
    private javax.swing.JRadioButton rbSingleBed;
    private javax.swing.JButton switchPanelFromCheckOutTable;
    private javax.swing.JTabbedPane tbPaneMain;
    private javax.swing.JTable tblCustomerCheckIn;
    private javax.swing.JTable tblRoom;
    private javax.swing.JTextField txtFieldCustomerName;
    private javax.swing.JTextField txtFieldCustomerName1;
    private javax.swing.JTextField txtFieldForCustomerSearch;
    private javax.swing.JTextField txtFieldMobileNumber;
    private javax.swing.JTextField txtFieldMobileNumber1;
    private javax.swing.JTextField txtFieldNationalityInCheckIn;
    private javax.swing.JTextField txtFieldPrice;
    private javax.swing.JTextField txtFieldPricePerDay;
    private javax.swing.JTextField txtFieldRoomNumber;
    private javax.swing.JTextField txtFieldRoomNumber1;
    private javax.swing.JTextField txtFieldRoomNumberCheckIn;
    private javax.swing.JTextField txtFieldTotalAmount;
    // End of variables declaration//GEN-END:variables
}
