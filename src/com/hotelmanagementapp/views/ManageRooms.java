/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.hotelmanagementapp.views;

import com.hotelmanagementapp.model.RoomModel;
import com.hotelmanagementapp.util.ValidationUtil;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Santosh Lama LMU ID: 23048594F
 */
public class ManageRooms extends javax.swing.JFrame {

    private final List<RoomModel> roomList;
    private DefaultTableModel tableModel;

    /**
     * Creates new form ManageRoom
     */
    public ManageRooms() {
        initComponents();
        roomList = new ArrayList<>(); //This is done to occupy the memory only when the program is run.
        addInitialRoomInformation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupBedType = new javax.swing.ButtonGroup();
        lblTitleHotelLogo = new javax.swing.JLabel();
        lblManageRoomsBackground = new javax.swing.JLabel();
        pnlMainBodyPanel = new javax.swing.JPanel();
        pnlForm = new javax.swing.JPanel();
        lblRoomNumber = new javax.swing.JLabel();
        txtFieldRoomNumber = new javax.swing.JTextField();
        lblRoomType = new javax.swing.JLabel();
        cmbRoomType = new javax.swing.JComboBox<>();
        lblBedType = new javax.swing.JLabel();
        rbSingleBed = new javax.swing.JRadioButton();
        rbDoubleBed = new javax.swing.JRadioButton();
        lblPrice = new javax.swing.JLabel();
        txtFieldPrice = new javax.swing.JTextField();
        lblRoomGrade = new javax.swing.JLabel();
        cmbRoomGrade = new javax.swing.JComboBox<>();
        lblStatus = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        btnUpdateRoomDetails = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnViewTable = new javax.swing.JButton();
        btnAddRoomDetails1 = new javax.swing.JButton();
        btnDeleteRoomDetails = new javax.swing.JButton();
        btnBackToHomePage = new javax.swing.JButton();
        pnlViewTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRoom = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnSwitchPanel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(300, 0, 0, 0));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitleHotelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/hotelLogo.jpg"))); // NOI18N
        getContentPane().add(lblTitleHotelLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 91));

        lblManageRoomsBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/manageRoomBackground.jpg"))); // NOI18N
        getContentPane().add(lblManageRoomsBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 1000, 200));

        pnlMainBodyPanel.setBackground(new java.awt.Color(234, 216, 177));
        pnlMainBodyPanel.setLayout(new java.awt.CardLayout());

        pnlForm.setBackground(new java.awt.Color(234, 216, 177));

        lblRoomNumber.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRoomNumber.setForeground(new java.awt.Color(102, 102, 102));
        lblRoomNumber.setText("Room Number");

        lblRoomType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRoomType.setForeground(new java.awt.Color(102, 102, 102));
        lblRoomType.setText("Room Type");

        cmbRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AC", "Non-AC", " " }));

        lblBedType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblBedType.setForeground(new java.awt.Color(102, 102, 102));
        lblBedType.setText("Bed Type");

        btnGroupBedType.add(rbSingleBed);
        rbSingleBed.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbSingleBed.setForeground(new java.awt.Color(102, 102, 102));
        rbSingleBed.setText("Single-bed");

        btnGroupBedType.add(rbDoubleBed);
        rbDoubleBed.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbDoubleBed.setForeground(new java.awt.Color(102, 102, 102));
        rbDoubleBed.setText("Double-bed");

        lblPrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(102, 102, 102));
        lblPrice.setText("Price");

        lblRoomGrade.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRoomGrade.setForeground(new java.awt.Color(102, 102, 102));
        lblRoomGrade.setText("Room Grade");

        cmbRoomGrade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Standard", "Deluxe", "Family Suite", "Presidential Suite", " ", " ", " " }));

        lblStatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(102, 102, 102));
        lblStatus.setText("Status");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Booked", "Not-Booked", " " }));

        btnUpdateRoomDetails.setBackground(new java.awt.Color(58, 109, 140));
        btnUpdateRoomDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdateRoomDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateRoomDetails.setText("Update Room Details");
        btnUpdateRoomDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateRoomDetailsActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(58, 109, 140));
        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnViewTable.setBackground(new java.awt.Color(58, 109, 140));
        btnViewTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnViewTable.setForeground(new java.awt.Color(255, 255, 255));
        btnViewTable.setText("View Table");
        btnViewTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTableActionPerformed(evt);
            }
        });

        btnAddRoomDetails1.setBackground(new java.awt.Color(58, 109, 140));
        btnAddRoomDetails1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddRoomDetails1.setForeground(new java.awt.Color(255, 255, 255));
        btnAddRoomDetails1.setText("Add Room Details");
        btnAddRoomDetails1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRoomDetails1ActionPerformed(evt);
            }
        });

        btnDeleteRoomDetails.setBackground(new java.awt.Color(58, 109, 140));
        btnDeleteRoomDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeleteRoomDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteRoomDetails.setText("Delete Room Details");
        btnDeleteRoomDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRoomDetailsActionPerformed(evt);
            }
        });

        btnBackToHomePage.setBackground(new java.awt.Color(58, 109, 140));
        btnBackToHomePage.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBackToHomePage.setForeground(new java.awt.Color(255, 255, 255));
        btnBackToHomePage.setText("Back to Home Page");
        btnBackToHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToHomePageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFormLayout = new javax.swing.GroupLayout(pnlForm);
        pnlForm.setLayout(pnlFormLayout);
        pnlFormLayout.setHorizontalGroup(
            pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormLayout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFormLayout.createSequentialGroup()
                        .addComponent(lblRoomGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(158, 158, 158))
                    .addGroup(pnlFormLayout.createSequentialGroup()
                        .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtFieldRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblBedType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFormLayout.createSequentialGroup()
                                .addComponent(rbSingleBed)
                                .addGap(62, 62, 62)
                                .addComponent(rbDoubleBed)))
                        .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFormLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlFormLayout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pnlFormLayout.createSequentialGroup()
                                        .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(pnlFormLayout.createSequentialGroup()
                        .addComponent(cmbRoomGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(147, 147, 147))
            .addGroup(pnlFormLayout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddRoomDetails1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(65, 65, 65)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUpdateRoomDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnViewTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(77, 77, 77)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDeleteRoomDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBackToHomePage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlFormLayout.setVerticalGroup(
            pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRoomGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbRoomGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBedType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSingleBed)
                    .addComponent(rbDoubleBed)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateRoomDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddRoomDetails1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteRoomDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewTable, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBackToHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pnlMainBodyPanel.add(pnlForm, "card2");

        pnlViewTable.setBackground(new java.awt.Color(234, 216, 177));

        tblRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room Number", "Room Type", "Room Grade", "Bed Type", "Price", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRoom);
        if (tblRoom.getColumnModel().getColumnCount() > 0) {
            tblRoom.getColumnModel().getColumn(0).setResizable(false);
            tblRoom.getColumnModel().getColumn(1).setResizable(false);
            tblRoom.getColumnModel().getColumn(2).setResizable(false);
            tblRoom.getColumnModel().getColumn(3).setResizable(false);
            tblRoom.getColumnModel().getColumn(4).setResizable(false);
            tblRoom.getColumnModel().getColumn(5).setResizable(false);
        }

        jButton1.setBackground(new java.awt.Color(153, 51, 0));
        jButton1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Switch Panel");

        btnSwitchPanel.setBackground(new java.awt.Color(153, 51, 0));
        btnSwitchPanel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnSwitchPanel.setForeground(new java.awt.Color(255, 255, 255));
        btnSwitchPanel.setText("Switch Panel");
        btnSwitchPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwitchPanelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlViewTableLayout = new javax.swing.GroupLayout(pnlViewTable);
        pnlViewTable.setLayout(pnlViewTableLayout);
        pnlViewTableLayout.setHorizontalGroup(
            pnlViewTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlViewTableLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(pnlViewTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 841, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSwitchPanel))
                .addContainerGap(134, Short.MAX_VALUE))
            .addGroup(pnlViewTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlViewTableLayout.createSequentialGroup()
                    .addGap(448, 448, 448)
                    .addComponent(jButton1)
                    .addContainerGap(449, Short.MAX_VALUE)))
        );
        pnlViewTableLayout.setVerticalGroup(
            pnlViewTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlViewTableLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(btnSwitchPanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
            .addGroup(pnlViewTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlViewTableLayout.createSequentialGroup()
                    .addGap(223, 223, 223)
                    .addComponent(jButton1)
                    .addContainerGap(224, Short.MAX_VALUE)))
        );

        pnlMainBodyPanel.add(pnlViewTable, "card3");

        getContentPane().add(pnlMainBodyPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 1000, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the button click event to switch to the table view panel.
     *
     * This method hides the form panel and makes the view table panel visible,
     * allowing the user to see the table displaying the room data.
     */
    private void btnViewTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTableActionPerformed
        pnlForm.setVisible(false);
        pnlViewTable.setVisible(true);
    }//GEN-LAST:event_btnViewTableActionPerformed

    /**
     * Handles the button click event to add room details to the system.
     *
     * This method retrieves and validates user inputs for room details such as
     * room number, type, grade, price, bed type, and status. If the validation
     * passes, it creates a new RoomModel object and calls addRoomData() to save
     * the room information.
     */
    private void btnAddRoomDetails1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRoomDetails1ActionPerformed

        String roomNumberStr = txtFieldRoomNumber.getText().trim();
        String roomType = cmbRoomType.getSelectedItem().toString().trim();
        String roomGrade = cmbRoomGrade.getSelectedItem().toString().trim();
        String priceStr = txtFieldPrice.getText().trim();
        String bedType = rbSingleBed.isSelected() ? "Single-bed" : (rbDoubleBed.isSelected() ? "Double-bed" : "");
        String status = cmbStatus.getSelectedItem().toString().trim();

        // Validate Room Number
        if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-5 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
            return;
        }
        if (roomType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Type is required. Please select either AC or Non-AC.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomType.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidRoomType(roomType)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Type. Select either 'AC' or 'Non-AC'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomType.requestFocus();
            return;
        }
        if (roomGrade.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Grade is required. 'Standard', 'Deluxe', 'Family Suite' or 'Presidential'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomGrade.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidRoomGrade(roomGrade)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Grade. It must be one of 'Standard', 'Deluxe', 'Family Suite' or 'Presidential'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomGrade.requestFocus();
            return;
        }
        if (priceStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Price is required. Please enter a valid price.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldPrice.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidPrice(priceStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Price. It must be a positive number with optional decimal points (up to 2 decimal places).", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldPrice.requestFocus();
            return;
        }
        if (bedType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bed Type is required. Please select either Single-bed or Double-bed.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!ValidationUtil.isValidBedType(bedType)) {
            JOptionPane.showMessageDialog(this, "Invalid Bed Type. It must be either 'Single-bed' or 'Double-bed'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (status.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Status is required. Please select from 'Available', 'Booked', or 'Maintenance'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbStatus.requestFocus();
            return;
        }
        if (!ValidationUtil.isValidStatus(status)) {
            JOptionPane.showMessageDialog(this, "Invalid Status. It must be one of 'Booked', or 'Not-Booked'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbStatus.requestFocus();
            return;
        }

        // Convert Room Number and Price
        int roomNumber = Integer.parseInt(roomNumberStr); // Convert to int
        double price = Double.parseDouble(priceStr);      // Convert to double

        // Check for duplicate room number
        for (RoomModel existingRoom : roomList) {
            if (existingRoom.getRoomNumber() == roomNumber) {
                JOptionPane.showMessageDialog(this, "Room Number " + roomNumber + " already exists. Please enter a different room number.", "Duplicate Error", JOptionPane.ERROR_MESSAGE);
                txtFieldRoomNumber.requestFocus();
                return;
            }
        }

        // Proceed to save the room details if no duplicates found
        RoomModel room1 = new RoomModel(roomNumber, roomType, roomGrade, bedType, price, status);
        addRoomData(room1);
        JOptionPane.showMessageDialog(this, "Room details successfully added!", "Success", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_btnAddRoomDetails1ActionPerformed
    /**
     * Handles the button click event to navigate back to the home page.
     *
     * This method creates a new instance of the home page and disposes of the
     * current window.
     */
    private void btnBackToHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToHomePageActionPerformed
        // TODO add your handling code here:
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackToHomePageActionPerformed

    /**
     * Handles the button click event to switch back to the form panel.
     *
     * This method hides the view table panel and makes the form panel visible
     * again.
     */
    private void btnSwitchPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwitchPanelActionPerformed
        // TODO add your handling code here:
        pnlForm.setVisible(true);
        pnlViewTable.setVisible(false);
    }//GEN-LAST:event_btnSwitchPanelActionPerformed
    /**
     * Handles the button click event for updating room details.
     *
     * This method performs validation for all the input fields (room number,
     * type, price, etc.). If all fields are valid, it calls the
     * updateRoomData() method to update both the ArrayList and the JTable.
     */
    private void btnUpdateRoomDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateRoomDetailsActionPerformed
        // TODO add your handling code here:
        // Get input values
        String roomNumberStr = txtFieldRoomNumber.getText().trim();
        String roomType = cmbRoomType.getSelectedItem().toString().trim();
        String roomGrade = cmbRoomGrade.getSelectedItem().toString().trim();
        String priceStr = txtFieldPrice.getText().trim();
        String bedType = rbSingleBed.isSelected() ? "Single-bed" : (rbDoubleBed.isSelected() ? "Double-bed" : "");
        String status = cmbStatus.getSelectedItem().toString().trim();

        // Validate Room Number
        if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
        } else if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-3 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
        } // Validate other fields (roomType, roomGrade, priceStr, bedType, status)
        else if (priceStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Price is required. Please enter a valid price.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldPrice.requestFocus();
        } else if (!ValidationUtil.isValidPrice(priceStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Price. It must be a positive number with optional decimal points (up to 2 decimal places).", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldPrice.requestFocus();
        } else {
            // Proceed to update data
            int roomNumber = Integer.parseInt(roomNumberStr);  // Convert to int
            double price = Double.parseDouble(priceStr);         // Convert to double

            // Call the method to update both ArrayList and JTable
            updateRoomData(roomNumber, roomType, roomGrade, bedType, price, status);
        }
    }//GEN-LAST:event_btnUpdateRoomDetailsActionPerformed

    /**
     * Handles the button click event for deleting room details.
     *
     * This method performs validation for the room number. If valid, it calls
     * the deleteRoomData() method to remove the room from both the ArrayList
     * and the JTable.
     */
    private void btnDeleteRoomDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRoomDetailsActionPerformed

        // Get the room number from the input field
        String roomNumberStr = txtFieldRoomNumber.getText().trim();

        // Validate Room Number
        if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();  // Focus on room number input field
        } else if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-3 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();  // Focus on room number input field
        } else {
            // Convert the room number to short type
            short roomNumber = Short.parseShort(roomNumberStr);

            // Call the method to delete the room from both ArrayList and JTable
            deleteRoomData(roomNumber);
        }

    }//GEN-LAST:event_btnDeleteRoomDetailsActionPerformed
    /*
 * Handles the logic for clearing all room-related input fields.
 * This method is called when the user clicks the "Clear" button for room details.
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtFieldRoomNumber.setText("");  // Clears the text field for room number
        cmbRoomType.setSelectedIndex(0);  // Reset the room type dropdown to the default (first item)
        cmbRoomGrade.setSelectedIndex(0); // Reset the room grade dropdown to the default (first item)
        txtFieldPrice.setText("");  // Clears the text field for price
        btnGroupBedType.clearSelection();    // Unselects any selected radio buttons in the group
        cmbStatus.setSelectedIndex(0);  // Reset the status dropdown to the default (first item)
        txtFieldRoomNumber.requestFocus();  // Focuses back on the room number input field

    }//GEN-LAST:event_btnClearActionPerformed

    public void addInitialRoomInformation() {
        RoomModel room1 = new RoomModel(101, "AC", "Family Suite", "Double-Bed", 12000, "Booked");
        roomList.add(room1);
        addRoomData(room1);
        RoomModel room2 = new RoomModel(102, "Non-AC", "Standard", "Single-Bed", 5000, "Booked");
        roomList.add(room2);
        addRoomData(room2);

        RoomModel room3 = new RoomModel(103, "Non-AC", "Deluxe", "Double-Bed", 10000, "Not-Booked");
        roomList.add(room3);
        addRoomData(room3);

        RoomModel room4 = new RoomModel(104, "AC", "Presidential Suite", "Single-Bed", 30000, "Not-Booked");
        roomList.add(room4);
        addRoomData(room4);

        RoomModel room5 = new RoomModel(105, "AC", "Standard", "Double-Bed", 14000, "Not-Booked");
        roomList.add(room5);
        addRoomData(room5);
    }

    /**
     * Adds room data to both the room list and the JTable.
     *
     * This method accepts a RoomModel object, adds it to the roomList
     * ArrayList, and updates the JTable by adding a new row with the room
     * details (room number, type, grade, bed type, price, and status).
     *
     * @param room The RoomModel object containing the room details to be added.
     */
    private void addRoomData(RoomModel room) {
        roomList.add(room); // Add room to the list
        DefaultTableModel model = (DefaultTableModel) tblRoom.getModel(); // Get the table model
        model.addRow(new Object[]{
            room.getRoomNumber(), room.getRoomType(), room.getRoomGrade(), room.getBedType(), room.getPrice(), room.getStatus()
        }); // Add the student details as a new row
    }

    /**
     * Updates the room data in the ArrayList and JTable.
     *
     * @param roomNumber the room number to identify the room for update
     * @param roomType the new room type (AC/Non-AC)
     * @param roomGrade the new room grade (Standard, Deluxe, etc.)
     * @param bedType the new bed type (Single-bed, Double-bed)
     * @param price the new room price
     * @param status the new room status (Booked/Not-Booked)
     */
    private void updateRoomData(int roomNumber, String roomType, String roomGrade, String bedType, double price, String status) {
        boolean roomFound = false;

        // Update the room data in the ArrayList
        for (int i = 0; i < roomList.size(); i++) {
            RoomModel room = roomList.get(i);

            if (room.getRoomNumber() == roomNumber) {
                roomFound = true;

                // Update the room details in the ArrayList
                room.setRoomType(roomType);
                room.setRoomGrade(roomGrade);
                room.setBedType(bedType);
                room.setPrice(price);
                room.setStatus(status);

                // Ensure JTable has enough rows
                DefaultTableModel model = (DefaultTableModel) tblRoom.getModel();
                if (model.getRowCount() <= i) {
                    model.setRowCount(i + 1); // Add rows as needed
                }

                // Update the corresponding row in the JTable
                tblRoom.setValueAt(roomType, i, 1);  // Room Type column
                tblRoom.setValueAt(roomGrade, i, 2);  // Room Grade column
                tblRoom.setValueAt(bedType, i, 3);    // Bed Type column
                tblRoom.setValueAt(price, i, 4);      // Price column
                tblRoom.setValueAt(status, i, 5);     // Status column

                // Show success message
                JOptionPane.showMessageDialog(this, "Room details updated successfully!", "Update Success", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }

        // If room number was not found
        if (!roomFound) {
            JOptionPane.showMessageDialog(this, "Room with number " + roomNumber + " not found.", "Update Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Deletes a room from the ArrayList and updates the JTable.
     *
     * @param roomNumber the room number to identify the room for deletion
     */
 public void deleteRoomData(short roomNumber) {
    boolean isRoomFound = false; // Flag to track if the room was found

    // Use an iterator to safely remove elements while iterating
    for (int i = 0; i < roomList.size(); i++) {
        RoomModel room = roomList.get(i);

        // Check if the room number matches
        if (room.getRoomNumber() == roomNumber) {
            isRoomFound = true;

            // Show confirmation dialog before deleting
            int response = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure you want to delete the room details for room number " + roomNumber + "?",
                    "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE
            );

            // If the user confirms the deletion
            if (response == JOptionPane.YES_OPTION) {
                // Remove the room from the ArrayList
                roomList.remove(i);

                // Remove the corresponding row from the JTable
                DefaultTableModel model = (DefaultTableModel) tblRoom.getModel();
                model.removeRow(i);

                // Show success message after deleting
                JOptionPane.showMessageDialog(
                        this,
                        "Room details deleted successfully!",
                        "Delete Success",
                        JOptionPane.INFORMATION_MESSAGE
                );
            } else {
                // If the user cancels, log the action
                System.out.println("Deletion canceled by user.");
            }

            break; // Exit the loop after handling the deletion
        }
    }

    // If the room number was not found in the ArrayList
    if (!isRoomFound) {
        JOptionPane.showMessageDialog(
                this,
                "Room with number " + roomNumber + " not found.",
                "Delete Error",
                JOptionPane.ERROR_MESSAGE
        );
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageRooms().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRoomDetails1;
    private javax.swing.JButton btnBackToHomePage;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDeleteRoomDetails;
    private javax.swing.ButtonGroup btnGroupBedType;
    private javax.swing.JButton btnSwitchPanel;
    private javax.swing.JButton btnUpdateRoomDetails;
    private javax.swing.JButton btnViewTable;
    private javax.swing.JComboBox<String> cmbRoomGrade;
    private javax.swing.JComboBox<String> cmbRoomType;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBedType;
    private javax.swing.JLabel lblManageRoomsBackground;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblRoomGrade;
    private javax.swing.JLabel lblRoomNumber;
    private javax.swing.JLabel lblRoomType;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitleHotelLogo;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JPanel pnlMainBodyPanel;
    private javax.swing.JPanel pnlViewTable;
    private javax.swing.JRadioButton rbDoubleBed;
    private javax.swing.JRadioButton rbSingleBed;
    private javax.swing.JTable tblRoom;
    private javax.swing.JTextField txtFieldPrice;
    private javax.swing.JTextField txtFieldRoomNumber;
    // End of variables declaration//GEN-END:variables
}
