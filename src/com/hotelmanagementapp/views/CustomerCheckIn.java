/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.hotelmanagementapp.views;

import com.hotelmanagementapp.model.CustomerCheckInModel;
import com.hotelmanagementapp.util.ValidationUtil;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Santosh Lama LMU ID: 23048594
 */
public class CustomerCheckIn extends javax.swing.JFrame {

    /**
     * Creates new form demo1
     */
    List<CustomerCheckInModel> checkInList;

    public CustomerCheckIn() {
        initComponents();
        checkInList = new LinkedList<>();
        SimpleDateFormat currentDate = new SimpleDateFormat("YYYY/MM/dd");
        Date date = new Date();
        txtFieldCheckInDate.setText(currentDate.format(date));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupGender = new javax.swing.ButtonGroup();
        lblTitleHotelLogo = new javax.swing.JLabel();
        lblManageCheckInBackGround = new javax.swing.JLabel();
        pnlBodyMain = new javax.swing.JPanel();
        pnlForm = new javax.swing.JPanel();
        cmbRoomType = new javax.swing.JComboBox<>();
        lblRoomType = new javax.swing.JLabel();
        lblBedType = new javax.swing.JLabel();
        rbMale = new javax.swing.JRadioButton();
        rbFemale = new javax.swing.JRadioButton();
        txtFieldNationality = new javax.swing.JTextField();
        lblNationality = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        rbDoubleBed = new javax.swing.JRadioButton();
        rbSingleBed = new javax.swing.JRadioButton();
        lblRoomNumber = new javax.swing.JLabel();
        txtFieldRoomNumber = new javax.swing.JTextField();
        txtFieldCheckInDate = new javax.swing.JTextField();
        lblCheckInDate = new javax.swing.JLabel();
        btnCheckInNow = new javax.swing.JButton();
        btnViewTable = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        txtFieldMobileNumber = new javax.swing.JTextField();
        lblMobileNumber = new javax.swing.JLabel();
        txtFieldCustomerName = new javax.swing.JTextField();
        lblCustomerName = new javax.swing.JLabel();
        btnBackToHomePage = new javax.swing.JButton();
        btnDeleteDetails = new javax.swing.JButton();
        btnUpdateCheckInDetails = new javax.swing.JButton();
        pnlViewTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomerCheckIn = new javax.swing.JTable();
        btnAddRoomDetails1 = new javax.swing.JButton();
        btnSwitchPanel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(300, 0, 0, 0));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitleHotelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/hotelLogo.jpg"))); // NOI18N
        getContentPane().add(lblTitleHotelLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 91));

        lblManageCheckInBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/MANAGE CHECK-INs.jpg"))); // NOI18N
        getContentPane().add(lblManageCheckInBackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, -1, -1));

        pnlBodyMain.setLayout(new java.awt.CardLayout());

        pnlForm.setBackground(new java.awt.Color(234, 216, 177));

        cmbRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AC", "Non-AC", " " }));

        lblRoomType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRoomType.setForeground(new java.awt.Color(102, 102, 102));
        lblRoomType.setText("Room Type");

        lblBedType.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblBedType.setForeground(new java.awt.Color(102, 102, 102));
        lblBedType.setText("Bed Type");

        btnGroupGender.add(rbMale);
        rbMale.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbMale.setForeground(new java.awt.Color(102, 102, 102));
        rbMale.setText("Male");

        btnGroupGender.add(rbFemale);
        rbFemale.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbFemale.setForeground(new java.awt.Color(102, 102, 102));
        rbFemale.setText("Female");

        lblNationality.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblNationality.setForeground(new java.awt.Color(102, 102, 102));
        lblNationality.setText("Nationality");

        lblGender.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblGender.setForeground(new java.awt.Color(102, 102, 102));
        lblGender.setText("Gender");

        rbDoubleBed.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbDoubleBed.setForeground(new java.awt.Color(102, 102, 102));
        rbDoubleBed.setText("Double-bed");

        rbSingleBed.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rbSingleBed.setForeground(new java.awt.Color(102, 102, 102));
        rbSingleBed.setText("Single-bed");

        lblRoomNumber.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRoomNumber.setForeground(new java.awt.Color(102, 102, 102));
        lblRoomNumber.setText("Room Number");

        txtFieldCheckInDate.setEditable(false);

        lblCheckInDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCheckInDate.setForeground(new java.awt.Color(102, 102, 102));
        lblCheckInDate.setText("Check-In Date");

        btnCheckInNow.setBackground(new java.awt.Color(58, 109, 140));
        btnCheckInNow.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCheckInNow.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckInNow.setText("Check In Now");
        btnCheckInNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckInNowActionPerformed(evt);
            }
        });

        btnViewTable.setBackground(new java.awt.Color(58, 109, 140));
        btnViewTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnViewTable.setForeground(new java.awt.Color(255, 255, 255));
        btnViewTable.setText("View Table");
        btnViewTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTableActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(58, 109, 140));
        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblMobileNumber.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblMobileNumber.setForeground(new java.awt.Color(102, 102, 102));
        lblMobileNumber.setText("Mobile Number");

        lblCustomerName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCustomerName.setForeground(new java.awt.Color(102, 102, 102));
        lblCustomerName.setText("Customer Name");

        btnBackToHomePage.setBackground(new java.awt.Color(58, 109, 140));
        btnBackToHomePage.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBackToHomePage.setForeground(new java.awt.Color(255, 255, 255));
        btnBackToHomePage.setText("Back to Home Page");
        btnBackToHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToHomePageActionPerformed(evt);
            }
        });

        btnDeleteDetails.setBackground(new java.awt.Color(58, 109, 140));
        btnDeleteDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeleteDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteDetails.setText("Delete Details");
        btnDeleteDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDetailsActionPerformed(evt);
            }
        });

        btnUpdateCheckInDetails.setBackground(new java.awt.Color(58, 109, 140));
        btnUpdateCheckInDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdateCheckInDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateCheckInDetails.setText("Update Details");
        btnUpdateCheckInDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCheckInDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFormLayout = new javax.swing.GroupLayout(pnlForm);
        pnlForm.setLayout(pnlFormLayout);
        pnlFormLayout.setHorizontalGroup(
            pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormLayout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlFormLayout.createSequentialGroup()
                        .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlFormLayout.createSequentialGroup()
                                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlFormLayout.createSequentialGroup()
                                        .addComponent(rbMale)
                                        .addGap(30, 30, 30)
                                        .addComponent(rbFemale)))
                                .addGap(124, 124, 124))
                            .addComponent(lblCustomerName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFieldCustomerName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(202, 202, 202)
                        .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFieldNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFieldMobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlFormLayout.createSequentialGroup()
                        .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFormLayout.createSequentialGroup()
                                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRoomNumber)
                                    .addComponent(txtFieldRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlFormLayout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnCheckInNow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnViewTable, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUpdateCheckInDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(43, 43, 43)))
                        .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCheckInDate)
                            .addComponent(txtFieldCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlFormLayout.createSequentialGroup()
                                .addComponent(rbSingleBed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbDoubleBed))
                            .addComponent(lblBedType, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlFormLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDeleteDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBackToHomePage))))))
                .addGap(160, 160, 160))
        );
        pnlFormLayout.setVerticalGroup(
            pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldMobileNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldNationality, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbMale)
                    .addComponent(rbFemale))
                .addGap(18, 18, 18)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBedType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbSingleBed)
                        .addComponent(rbDoubleBed)))
                .addGap(18, 18, 18)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormLayout.createSequentialGroup()
                        .addComponent(lblCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFieldCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlFormLayout.createSequentialGroup()
                        .addComponent(lblRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFieldRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckInNow, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateCheckInDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBackToHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewTable, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pnlBodyMain.add(pnlForm, "card2");

        tblCustomerCheckIn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Name", "Mobile Number", "Gender", "Nationality", "Bed Type", "Room Type", "Room Number", "Check-In Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCustomerCheckIn);
        if (tblCustomerCheckIn.getColumnModel().getColumnCount() > 0) {
            tblCustomerCheckIn.getColumnModel().getColumn(0).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(1).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(2).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(3).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(4).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(5).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(6).setResizable(false);
            tblCustomerCheckIn.getColumnModel().getColumn(7).setResizable(false);
        }

        btnAddRoomDetails1.setBackground(new java.awt.Color(58, 109, 140));
        btnAddRoomDetails1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddRoomDetails1.setForeground(new java.awt.Color(255, 255, 255));
        btnAddRoomDetails1.setText("Add Room Details");

        btnSwitchPanel.setBackground(new java.awt.Color(153, 51, 0));
        btnSwitchPanel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnSwitchPanel.setForeground(new java.awt.Color(255, 255, 255));
        btnSwitchPanel.setText("Switch Panel");
        btnSwitchPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwitchPanelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlViewTableLayout = new javax.swing.GroupLayout(pnlViewTable);
        pnlViewTable.setLayout(pnlViewTableLayout);
        pnlViewTableLayout.setHorizontalGroup(
            pnlViewTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlViewTableLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(pnlViewTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 841, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSwitchPanel))
                .addContainerGap(160, Short.MAX_VALUE))
            .addGroup(pnlViewTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlViewTableLayout.createSequentialGroup()
                    .addGap(442, 442, 442)
                    .addComponent(btnAddRoomDetails1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(442, 442, 442)))
        );
        pnlViewTableLayout.setVerticalGroup(
            pnlViewTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlViewTableLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSwitchPanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlViewTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlViewTableLayout.createSequentialGroup()
                    .addGap(213, 213, 213)
                    .addComponent(btnAddRoomDetails1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(223, Short.MAX_VALUE)))
        );

        pnlBodyMain.add(pnlViewTable, "card3");

        getContentPane().add(pnlBodyMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 296, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the button click event for customer check-in.
     *
     * This method performs validation on the customer details such as name,
     * mobile number, gender, nationality, room type, bed type, and room number.
     * If all validations pass, it adds the check-in details to the list and
     * updates the table.
     */
    private void btnCheckInNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckInNowActionPerformed
        // TODO add your handling code here:
        // Retrieve input values
        String customerName = txtFieldCustomerName.getText().trim();
        String mobileNumber = txtFieldMobileNumber.getText().trim();
        String gender = rbMale.isSelected() ? "Male" : (rbFemale.isSelected() ? "Female" : "");
        String nationality = txtFieldNationality.getText().trim();
        String roomType = cmbRoomType.getSelectedItem().toString().trim();
        String bedType = rbSingleBed.isSelected() ? "Single-bed" : (rbDoubleBed.isSelected() ? "Double-bed" : "");
        String roomNumberStr = txtFieldRoomNumber.getText().trim();
        String checkInDate = txtFieldCheckInDate.getText().trim();

        // Validate Customer Name
        if (customerName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Customer Name is required. Please enter a valid name.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldCustomerName.requestFocus();
        } else if (!ValidationUtil.isValidCustomerName(customerName)) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Name. It must contain 2-50 alphabetic characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldCustomerName.requestFocus();
        } // Validate Mobile Number
        else if (mobileNumber.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mobile Number is required. Please enter a valid mobile number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldMobileNumber.requestFocus();
        } else if (!ValidationUtil.isValidMobileNumber(mobileNumber)) {
            JOptionPane.showMessageDialog(this, "Invalid Mobile Number. It must be a 10-digit number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldMobileNumber.requestFocus();
        } // Validate Gender
        else if (gender.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Gender is required. Please select Male or Female.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } // Validate Nationality
        else if (nationality.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nationality is required. Please enter a valid nationality.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldNationality.requestFocus();
        } else if (!ValidationUtil.isValidNationality(nationality)) {
            JOptionPane.showMessageDialog(this, "Invalid Nationality. It must contain 2-30 alphabetic characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldNationality.requestFocus();
        } // Validate Room Type
        else if (roomType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Type is required. Please select either AC or Non-AC.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomType.requestFocus();
        } else if (!ValidationUtil.isValidRoomType(roomType)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Type. Select either 'AC' or 'Non-AC'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomType.requestFocus();
        } // Validate Bed Type
        else if (bedType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bed Type is required. Please select either Single-bed or Double-bed.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } else if (!ValidationUtil.isValidBedType(bedType)) {
            JOptionPane.showMessageDialog(this, "Invalid Bed Type. It must be either 'Single-bed' or 'Double-bed'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } // Validate Room Number
        else if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
        } else if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-3 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
        } // If all validations pass
        else {
            short roomNumber = Short.parseShort(roomNumberStr);
            CustomerCheckInModel checkInDetails = new CustomerCheckInModel(customerName, mobileNumber, gender, nationality, bedType, roomType, roomNumber, checkInDate);
            checkInList.add(checkInDetails);
            addCheckInData(checkInDetails);
            JOptionPane.showMessageDialog(this, "Check-In Successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnCheckInNowActionPerformed
    /**
     * Handles the action when the "View Table" button is clicked.
     *
     * This method hides the form panel (pnlForm) and displays the view table
     * panel (pnlViewTable).
     */
    private void btnViewTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTableActionPerformed
        pnlForm.setVisible(false);
        pnlViewTable.setVisible(true);
    }//GEN-LAST:event_btnViewTableActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed

        // Clear all text fields
        txtFieldCustomerName.setText("");  // Clears the customer name field
        txtFieldMobileNumber.setText("");  // Clears the mobile number field
        txtFieldNationality.setText("");   // Clears the nationality field
        txtFieldRoomNumber.setText("");    // Clears the room number field
//        txtFieldCheckInDate.setText("");   // Clears the check-in date field

        btnGroupGender.clearSelection(); 
        rbMale.setSelected(false);          // Optionally deselects the Male radio button
        rbFemale.setSelected(false);        // Optionally deselects the Female radio button

        // Reset combo box for room type
        cmbRoomType.setSelectedIndex(0);    // Resets the combo box to the default (first) item

        // Reset radio buttons for bed type
        rbSingleBed.setSelected(false);     // Deselects the Single-bed option
        rbDoubleBed.setSelected(false);     // Deselects the Double-bed option

        // Optionally focus the first input field after clearing
        txtFieldCustomerName.requestFocus(); // Sets focus back to the customer name field

    }//GEN-LAST:event_btnClearActionPerformed
    /**
     * Handles the action when the "Back to Home Page" button is clicked.
     *
     * This method navigates the user back to the home page by creating a new
     * instance of the homePage window, making it visible, and disposing of the
     * current window (this).
     */
    private void btnBackToHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToHomePageActionPerformed
        // TODO add your handling code here:
        new HomePage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackToHomePageActionPerformed

    /**
     * Handles the action when the "Switch Panel" button is clicked.
     *
     * This method switches between the form panel and the view table panel.
     * When the button is clicked, the form panel is made visible, and the view
     * table panel is hidden.
     */
    private void btnSwitchPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwitchPanelActionPerformed
        // TODO add your handling code here:
        pnlForm.setVisible(true);
        pnlViewTable.setVisible(false);
    }//GEN-LAST:event_btnSwitchPanelActionPerformed

    /**
     * Handles the button click event for deleting check-in details.
     *
     * This method performs validation for the room number. If valid, it calls
     * the deleteCheckInData() method to remove the check-in data from both the
     * ArrayList and the JTable.
     */
    private void btnDeleteDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDetailsActionPerformed
        // TODO add your handling code here:

        // Get the room number from the input field
        String roomNumberStr = txtFieldRoomNumber.getText().trim();

        // Validate Room Number
        if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();  // Focus on room number input field
        } else if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-3 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();  // Focus on room number input field
        } else {
            // Convert the room number to integer type
            int roomNumber = Integer.parseInt(roomNumberStr);

            // Call the method to delete the check-in data from both ArrayList and JTable
            deleteCheckInData(roomNumber);
        }

    }//GEN-LAST:event_btnDeleteDetailsActionPerformed
    /**
     * Handles the action when the "Update Details" button is clicked.
     *
     * This method retrieves the input values from the form fields, validates
     * them, and updates the details of a customer or room in the system. If
     * validation passes, it updates the relevant data in the model and reflects
     * those changes in the displayed table. A success message is shown upon
     * successful update.
     */
    private void btnUpdateCheckInDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCheckInDetailsActionPerformed

        // Retrieve input values
        String customerName = txtFieldCustomerName.getText().trim();
        String mobileNumber = txtFieldMobileNumber.getText().trim();
        String gender = rbMale.isSelected() ? "Male" : (rbFemale.isSelected() ? "Female" : "");
        String nationality = txtFieldNationality.getText().trim();
        String roomType = cmbRoomType.getSelectedItem().toString().trim();
        String bedType = rbSingleBed.isSelected() ? "Single-bed" : (rbDoubleBed.isSelected() ? "Double-bed" : "");
        String roomNumberStr = txtFieldRoomNumber.getText().trim();
        String checkInDate = txtFieldCheckInDate.getText().trim();

        // Validate Customer Name
        if (customerName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Customer Name is required. Please enter a valid name.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldCustomerName.requestFocus();
        } else if (!ValidationUtil.isValidCustomerName(customerName)) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Name. It must contain 2-50 alphabetic characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldCustomerName.requestFocus();
        } // Validate Mobile Number
        else if (mobileNumber.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mobile Number is required. Please enter a valid mobile number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldMobileNumber.requestFocus();
        } else if (!ValidationUtil.isValidMobileNumber(mobileNumber)) {
            JOptionPane.showMessageDialog(this, "Invalid Mobile Number. It must be a 10-digit number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldMobileNumber.requestFocus();
        } // Validate Gender
        else if (gender.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Gender is required. Please select Male or Female.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } // Validate Nationality
        else if (nationality.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nationality is required. Please enter a valid nationality.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldNationality.requestFocus();
        } else if (!ValidationUtil.isValidNationality(nationality)) {
            JOptionPane.showMessageDialog(this, "Invalid Nationality. It must contain 2-30 alphabetic characters.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldNationality.requestFocus();
        } // Validate Room Type
        else if (roomType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Type is required. Please select either AC or Non-AC.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomType.requestFocus();
        } else if (!ValidationUtil.isValidRoomType(roomType)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Type. Select either 'AC' or 'Non-AC'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            cmbRoomType.requestFocus();
        } // Validate Bed Type
        else if (bedType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bed Type is required. Please select either Single-bed or Double-bed.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } else if (!ValidationUtil.isValidBedType(bedType)) {
            JOptionPane.showMessageDialog(this, "Invalid Bed Type. It must be either 'Single-bed' or 'Double-bed'.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } // Validate Room Number
        else if (roomNumberStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Room Number is required. Please enter a valid room number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
        } else if (!ValidationUtil.isValidRoomNumber(roomNumberStr)) {
            JOptionPane.showMessageDialog(this, "Invalid Room Number. It must be a numeric value (1-5 digits) and cannot start with a zero.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            txtFieldRoomNumber.requestFocus();
        } // If all validations pass
        else {
            int roomNumber = Integer.parseInt(roomNumberStr);
            updateCheckInData(roomNumber, customerName, mobileNumber, gender, nationality, bedType, roomType, checkInDate);

        }
    }//GEN-LAST:event_btnUpdateCheckInDetailsActionPerformed
    /**
     * Adds the given customer check-in data to the JTable and the check-in
     * list.
     *
     * This method takes a `CustomerCheckInModel` object, adds it to the
     * internal list that holds the check-in data (`checkInList`), and then
     * updates the JTable to reflect this new data. The JTable is updated by
     * adding a new row with the customer's check-in details.
     *
     * @param checkInDetails The `CustomerCheckInModel` object containing the
     * details of the customer who is checking in.
     */
    private void addCheckInData(CustomerCheckInModel checkInDetails) {
        checkInList.add(checkInDetails); // Add room to the list
        DefaultTableModel model = (DefaultTableModel) tblCustomerCheckIn.getModel(); // Get the table model
        model.addRow(new Object[]{
            checkInDetails.getCustomerName(), checkInDetails.getMobileNumber(), checkInDetails.getGender(), checkInDetails.getNationality(), checkInDetails.getBedType(), checkInDetails.getRoomType(),
            checkInDetails.getRoomNumber(), checkInDetails.getCheckInDate()

        }); // Add the student details as a new row
    }

    /**
     * Handles the update of customer check-in details.
     *
     * This method updates the check-in details for a customer with the provided
     * room number. It updates the relevant fields in both the ArrayList and the
     * JTable.
     *
     * @param roomNumber The room number of the customer whose check-in details
     * need to be updated.
     * @param customerName The new customer name.
     * @param mobileNumber The new mobile number.
     * @param gender The new gender.
     * @param nationality The new nationality.
     * @param bedType The new bed type.
     * @param roomType The new room type.
     * @param checkInDate The new check-in date.
     */
    private void updateCheckInData(int roomNumber, String customerName, String mobileNumber, String gender, String nationality, String bedType, String roomType, String checkInDate) {
        // Update the check-in data in the ArrayList
        for (int i = 0; i < checkInList.size(); i++) {
            CustomerCheckInModel checkIn = checkInList.get(i);
            if (checkIn.getRoomNumber() == roomNumber) {
                // Update the check-in details in the ArrayList
                checkIn.setCustomerName(customerName);
                checkIn.setMobileNumber(mobileNumber);
                checkIn.setGender(gender);
                checkIn.setNationality(nationality);
                checkIn.setBedType(bedType);
                checkIn.setRoomType(roomType);
                checkIn.setCheckInDate(checkInDate);  

                // Also update the corresponding row in the JTable
                tblCustomerCheckIn.setValueAt(customerName, i, 0);   // Customer Name column
                tblCustomerCheckIn.setValueAt(mobileNumber, i, 1);   // Mobile Number column
                tblCustomerCheckIn.setValueAt(gender, i, 2);         // Gender column
                tblCustomerCheckIn.setValueAt(nationality, i, 3);    // Nationality column
                tblCustomerCheckIn.setValueAt(bedType, i, 4);        // Bed Type column
                tblCustomerCheckIn.setValueAt(roomType, i, 5);       // Room Type column
                tblCustomerCheckIn.setValueAt(roomNumber, i, 6);     // Room Number column
                tblCustomerCheckIn.setValueAt(checkInDate, i, 7);    // Check-in Date column

                // Show success message
                JOptionPane.showMessageDialog(this, "Customer check-in details updated successfully!", "Update Success", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }

        // If room number was not found
        JOptionPane.showMessageDialog(this, "Room with number " + roomNumber + " not found.", "Update Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Deletes customer check-in details based on the room number.
     *
     * This method removes the check-in details from the ArrayList and updates
     * the JTable. If the room number is not found, an error message is shown.
     *
     * @param roomNumber The room number of the customer whose check-in details
     * need to be deleted.
     */
public void deleteCheckInData(int roomNumber) {
    // Loop through the check-in list to find the customer with the given roomNumber
    for (int i = 0; i < checkInList.size(); i++) {
        CustomerCheckInModel checkIn = checkInList.get(i);
        // Check if the room number matches
        if (checkIn.getRoomNumber() == roomNumber) {
            // Show confirmation dialog before deleting
            int response = JOptionPane.showConfirmDialog(
                this, 
                "Are you sure you want to delete the check-in details for room number " + roomNumber + "?", 
                "Confirm Deletion", 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.QUESTION_MESSAGE
            );

            // If the user selects Yes
            if (response == JOptionPane.YES_OPTION) {
                // Remove the customer check-in details from the ArrayList
                checkInList.remove(i);

                // Remove the corresponding row from the JTable
                ((DefaultTableModel) tblCustomerCheckIn.getModel()).removeRow(i);

                // Show success message after deleting
                JOptionPane.showMessageDialog(this, "Customer check-in details deleted successfully!", "Delete Success", JOptionPane.INFORMATION_MESSAGE);
                return;  // Exit once the check-in data is deleted
            } else {
                // If the user selects No, do nothing and return
                return;
            }
        }
    }

    // If the room number was not found in the ArrayList
    JOptionPane.showMessageDialog(this, "Customer check-in with room number " + roomNumber + " not found.", "Delete Error", JOptionPane.ERROR_MESSAGE);
}



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerCheckIn().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRoomDetails1;
    private javax.swing.JButton btnBackToHomePage;
    private javax.swing.JButton btnCheckInNow;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDeleteDetails;
    private javax.swing.ButtonGroup btnGroupGender;
    private javax.swing.JButton btnSwitchPanel;
    private javax.swing.JButton btnUpdateCheckInDetails;
    private javax.swing.JButton btnViewTable;
    private javax.swing.JComboBox<String> cmbRoomType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBedType;
    private javax.swing.JLabel lblCheckInDate;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblManageCheckInBackGround;
    private javax.swing.JLabel lblMobileNumber;
    private javax.swing.JLabel lblNationality;
    private javax.swing.JLabel lblRoomNumber;
    private javax.swing.JLabel lblRoomType;
    private javax.swing.JLabel lblTitleHotelLogo;
    private javax.swing.JPanel pnlBodyMain;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JPanel pnlViewTable;
    private javax.swing.JRadioButton rbDoubleBed;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JRadioButton rbSingleBed;
    private javax.swing.JTable tblCustomerCheckIn;
    private javax.swing.JTextField txtFieldCheckInDate;
    private javax.swing.JTextField txtFieldCustomerName;
    private javax.swing.JTextField txtFieldMobileNumber;
    private javax.swing.JTextField txtFieldNationality;
    private javax.swing.JTextField txtFieldRoomNumber;
    // End of variables declaration//GEN-END:variables
}
